// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: github.com/containerd/containerd/api/services/mountmanager/v1/mountmanager.proto

package mountmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MountManagerClient is the client API for MountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MountManagerClient interface {
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error)
}

type mountManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMountManagerClient(cc grpc.ClientConnInterface) MountManagerClient {
	return &mountManagerClient{cc}
}

func (c *mountManagerClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, "/containerd.services.mountmanager.v1.MountManager/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mountManagerClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error) {
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, "/containerd.services.mountmanager.v1.MountManager/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MountManagerServer is the server API for MountManager service.
// All implementations must embed UnimplementedMountManagerServer
// for forward compatibility
type MountManagerServer interface {
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error)
	mustEmbedUnimplementedMountManagerServer()
}

// UnimplementedMountManagerServer must be embedded to have forward compatible implementations.
type UnimplementedMountManagerServer struct {
}

func (UnimplementedMountManagerServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedMountManagerServer) Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedMountManagerServer) mustEmbedUnimplementedMountManagerServer() {}

// UnsafeMountManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MountManagerServer will
// result in compilation errors.
type UnsafeMountManagerServer interface {
	mustEmbedUnimplementedMountManagerServer()
}

func RegisterMountManagerServer(s grpc.ServiceRegistrar, srv MountManagerServer) {
	s.RegisterService(&MountManager_ServiceDesc, srv)
}

func _MountManager_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountManagerServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.services.mountmanager.v1.MountManager/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountManagerServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MountManager_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountManagerServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.services.mountmanager.v1.MountManager/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountManagerServer).Unmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MountManager_ServiceDesc is the grpc.ServiceDesc for MountManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MountManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "containerd.services.mountmanager.v1.MountManager",
	HandlerType: (*MountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _MountManager_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _MountManager_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/containerd/containerd/api/services/mountmanager/v1/mountmanager.proto",
}
