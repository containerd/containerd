// Code generated by protoc-gen-go-ttrpc. DO NOT EDIT.
// source: github.com/containerd/containerd/api/services/mounts/v1/mounts.proto
package mounts

import (
	context "context"
	ttrpc "github.com/containerd/ttrpc"
)

type TTRPCMountsService interface {
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error)
}

func RegisterTTRPCMountsService(srv *ttrpc.Server, svc TTRPCMountsService) {
	srv.RegisterService("containerd.services.mounts.v1.Mounts", &ttrpc.ServiceDesc{
		Methods: map[string]ttrpc.Method{
			"Mount": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req MountRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Mount(ctx, &req)
			},
			"Unmount": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
				var req UnmountRequest
				if err := unmarshal(&req); err != nil {
					return nil, err
				}
				return svc.Unmount(ctx, &req)
			},
		},
	})
}

type ttrpcmountsClient struct {
	client *ttrpc.Client
}

func NewTTRPCMountsClient(client *ttrpc.Client) TTRPCMountsService {
	return &ttrpcmountsClient{
		client: client,
	}
}

func (c *ttrpcmountsClient) Mount(ctx context.Context, req *MountRequest) (*MountResponse, error) {
	var resp MountResponse
	if err := c.client.Call(ctx, "containerd.services.mounts.v1.Mounts", "Mount", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *ttrpcmountsClient) Unmount(ctx context.Context, req *UnmountRequest) (*UnmountResponse, error) {
	var resp UnmountResponse
	if err := c.client.Call(ctx, "containerd.services.mounts.v1.Mounts", "Unmount", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}
