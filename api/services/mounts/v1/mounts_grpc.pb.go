// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: github.com/containerd/containerd/api/services/mounts/v1/mounts.proto

package mounts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MountsClient is the client API for Mounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MountsClient interface {
	Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error)
	Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error)
}

type mountsClient struct {
	cc grpc.ClientConnInterface
}

func NewMountsClient(cc grpc.ClientConnInterface) MountsClient {
	return &mountsClient{cc}
}

func (c *mountsClient) Mount(ctx context.Context, in *MountRequest, opts ...grpc.CallOption) (*MountResponse, error) {
	out := new(MountResponse)
	err := c.cc.Invoke(ctx, "/containerd.services.mounts.v1.Mounts/Mount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mountsClient) Unmount(ctx context.Context, in *UnmountRequest, opts ...grpc.CallOption) (*UnmountResponse, error) {
	out := new(UnmountResponse)
	err := c.cc.Invoke(ctx, "/containerd.services.mounts.v1.Mounts/Unmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MountsServer is the server API for Mounts service.
// All implementations must embed UnimplementedMountsServer
// for forward compatibility
type MountsServer interface {
	Mount(context.Context, *MountRequest) (*MountResponse, error)
	Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error)
	mustEmbedUnimplementedMountsServer()
}

// UnimplementedMountsServer must be embedded to have forward compatible implementations.
type UnimplementedMountsServer struct {
}

func (UnimplementedMountsServer) Mount(context.Context, *MountRequest) (*MountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mount not implemented")
}
func (UnimplementedMountsServer) Unmount(context.Context, *UnmountRequest) (*UnmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unmount not implemented")
}
func (UnimplementedMountsServer) mustEmbedUnimplementedMountsServer() {}

// UnsafeMountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MountsServer will
// result in compilation errors.
type UnsafeMountsServer interface {
	mustEmbedUnimplementedMountsServer()
}

func RegisterMountsServer(s grpc.ServiceRegistrar, srv MountsServer) {
	s.RegisterService(&Mounts_ServiceDesc, srv)
}

func _Mounts_Mount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountsServer).Mount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.services.mounts.v1.Mounts/Mount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountsServer).Mount(ctx, req.(*MountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mounts_Unmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MountsServer).Unmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.services.mounts.v1.Mounts/Unmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MountsServer).Unmount(ctx, req.(*UnmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mounts_ServiceDesc is the grpc.ServiceDesc for Mounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "containerd.services.mounts.v1.Mounts",
	HandlerType: (*MountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mount",
			Handler:    _Mounts_Mount_Handler,
		},
		{
			MethodName: "Unmount",
			Handler:    _Mounts_Unmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/containerd/containerd/api/services/mounts/v1/mounts.proto",
}
