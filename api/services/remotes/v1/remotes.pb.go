// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/containerd/containerd/api/services/remotes/v1/remotes.proto

package remotes

import (
	context "context"
	fmt "fmt"
	types "github.com/containerd/containerd/api/types"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	github_com_opencontainers_go_digest "github.com/opencontainers/go-digest"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Action defines the action that occurs when pushing content.
// It is returned as part of the push/pull response streams.
type Action int32

const (
	// Upload not registered yet
	Action_Waiting Action = 0
	// Content is being uploaded to the remote repository
	Action_Write Action = 1
	// Content is committed to the remote repository
	Action_Commit Action = 2
	// Content is fully uploaded to the remote repository.
	Action_Done Action = 3
)

var Action_name = map[int32]string{
	0: "Waiting",
	1: "Write",
	2: "Commit",
	3: "Done",
}

var Action_value = map[string]int32{
	"Waiting": 0,
	"Write":   1,
	"Commit":  2,
	"Done":    3,
}

func (x Action) String() string {
	return proto.EnumName(Action_name, int32(x))
}

func (Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d36e6abae2750e37, []int{0}
}

// PushRequest describes a request to push content.
type PushRequest struct {
	// Source is the descitptor of the source content to push.
	Source types.Descriptor `protobuf:"bytes,1,opt,name=source,proto3" json:"source"`
	// Platform is the platform to push content for.
	// TODO: Should we require the client to give us the exact descriptor they want to push?
	//
	// Platform is used to, essentially, determine if when the descriptor is an index if we
	// should push that
	Platform *types.Platform `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
	// Target is the canonical reference for the repository to push to.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// Auth is a mapping of registry host => credentials.
	// This will be used to authorize pushes to the remote.
	Auth *UserPassAuth `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
	// Maxconcurrency is the maximum number of concurrent blob pushes.
	MaxConcurrency       int64    `protobuf:"varint,5,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()      { *m = PushRequest{} }
func (*PushRequest) ProtoMessage() {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36e6abae2750e37, []int{0}
}
func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return m.Size()
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

// UserPassAuth is used to pass auth credentials from the client to use during Push
type UserPassAuth struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserPassAuth) Reset()      { *m = UserPassAuth{} }
func (*UserPassAuth) ProtoMessage() {}
func (*UserPassAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36e6abae2750e37, []int{1}
}
func (m *UserPassAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPassAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPassAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPassAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPassAuth.Merge(m, src)
}
func (m *UserPassAuth) XXX_Size() int {
	return m.Size()
}
func (m *UserPassAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPassAuth.DiscardUnknown(m)
}

var xxx_messageInfo_UserPassAuth proto.InternalMessageInfo

// PushResponse is the response to a push request.
// It is a used as a stream sent to the push client to indicate progress of the push.
// Each blob should have a corresponding status message.
type PushResponse struct {
	Statuses             []*Status `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PushResponse) Reset()      { *m = PushResponse{} }
func (*PushResponse) ProtoMessage() {}
func (*PushResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36e6abae2750e37, []int{2}
}
func (m *PushResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PushResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PushResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PushResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushResponse.Merge(m, src)
}
func (m *PushResponse) XXX_Size() int {
	return m.Size()
}
func (m *PushResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PushResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PushResponse proto.InternalMessageInfo

// Status indicates the current state of an ongoing push
type Status struct {
	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=containerd.services.remtotes.v1.Action" json:"action,omitempty"`
	// StartedAt provides the time at which the write began.
	//
	// This must be set for stat and commit write actions. All other write
	// actions may omit this.
	StartedAt time.Time `protobuf:"bytes,2,opt,name=started_at,json=startedAt,proto3,stdtime" json:"started_at"`
	// UpdatedAt provides the last time of a successful write.
	//
	// This must be set for stat and commit write actions. All other write
	// actions may omit this.
	UpdatedAt time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	// Offset is the current committed size for the write.
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// Total provides the current, expected total size of the write.
	//
	// We include this to provide consistency with the Status structure on the
	// client writer.
	//
	// This is only valid on the Stat and Commit response.
	Total int64 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
	// Digest, if present, includes the digest up to the currently committed
	// bytes. If action is commit, this field will be set. It is implementation
	// defined if this is set for other actions.
	Digest github_com_opencontainers_go_digest.Digest `protobuf:"bytes,6,opt,name=digest,proto3,customtype=github.com/opencontainers/go-digest.Digest" json:"digest"`
	// Name is the name of the blob being written.
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()      { *m = Status{} }
func (*Status) ProtoMessage() {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_d36e6abae2750e37, []int{3}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("containerd.services.remtotes.v1.Action", Action_name, Action_value)
	proto.RegisterType((*PushRequest)(nil), "containerd.services.remtotes.v1.PushRequest")
	proto.RegisterType((*UserPassAuth)(nil), "containerd.services.remtotes.v1.UserPassAuth")
	proto.RegisterType((*PushResponse)(nil), "containerd.services.remtotes.v1.PushResponse")
	proto.RegisterType((*Status)(nil), "containerd.services.remtotes.v1.Status")
}

func init() {
	proto.RegisterFile("github.com/containerd/containerd/api/services/remotes/v1/remotes.proto", fileDescriptor_d36e6abae2750e37)
}

var fileDescriptor_d36e6abae2750e37 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xe3, 0x24, 0x75, 0x93, 0x4d, 0x55, 0xa2, 0x55, 0x85, 0xac, 0x08, 0x39, 0x51, 0x2e,
	0x8d, 0x2a, 0x6a, 0xd3, 0x20, 0x21, 0x41, 0x0f, 0x90, 0xa4, 0xea, 0x81, 0x53, 0xe5, 0x82, 0x8a,
	0x7a, 0xa9, 0xb6, 0xce, 0xc4, 0xb1, 0x54, 0x7b, 0xcd, 0xee, 0xb8, 0xb4, 0x37, 0x2e, 0x48, 0x1c,
	0x79, 0x07, 0x78, 0x0a, 0x9e, 0xa0, 0x47, 0x8e, 0x88, 0x43, 0xa1, 0x79, 0x12, 0xe4, 0xf5, 0xc6,
	0x8d, 0xc4, 0xa1, 0x29, 0xa7, 0xcc, 0x38, 0xff, 0xf7, 0xc7, 0x3b, 0xff, 0x6c, 0xc8, 0x7e, 0x10,
	0xe2, 0x34, 0x3d, 0x75, 0x7c, 0x1e, 0xb9, 0x3e, 0x8f, 0x91, 0x85, 0x31, 0x88, 0xf1, 0x62, 0xc9,
	0x92, 0xd0, 0x95, 0x20, 0xce, 0x43, 0x1f, 0xa4, 0x2b, 0x20, 0xe2, 0x08, 0xd2, 0x3d, 0xdf, 0x99,
	0x97, 0x4e, 0x22, 0x38, 0x72, 0xda, 0xbe, 0x25, 0x9c, 0xb9, 0xda, 0x11, 0x10, 0xa1, 0xd2, 0x9c,
	0xef, 0xb4, 0x36, 0x02, 0x1e, 0x70, 0xa5, 0x75, 0xb3, 0x2a, 0xc7, 0x5a, 0xed, 0x80, 0xf3, 0xe0,
	0x0c, 0x5c, 0xd5, 0x9d, 0xa6, 0x13, 0x17, 0xc3, 0x08, 0x24, 0xb2, 0x28, 0xd1, 0x82, 0xdd, 0xa5,
	0xde, 0x0f, 0x2f, 0x13, 0x90, 0xee, 0x18, 0xa4, 0x2f, 0xc2, 0x04, 0xb9, 0xd0, 0xf0, 0xf3, 0x7b,
	0xc0, 0xc9, 0x19, 0xc3, 0x09, 0x17, 0x51, 0x8e, 0x76, 0x3f, 0x95, 0x49, 0xe3, 0x20, 0x95, 0x53,
	0x0f, 0xde, 0xa7, 0x20, 0x91, 0xbe, 0x20, 0xa6, 0xe4, 0xa9, 0xf0, 0xc1, 0x32, 0x3a, 0x46, 0xaf,
	0xd1, 0x7f, 0xe4, 0x2c, 0x1c, 0x58, 0x39, 0x38, 0x7b, 0xc5, 0xcf, 0x0f, 0xab, 0x57, 0xd7, 0xed,
	0x92, 0xa7, 0x09, 0xfa, 0x8c, 0xd4, 0xe6, 0xee, 0x56, 0x59, 0xd1, 0xad, 0x7f, 0xe9, 0x03, 0xad,
	0xf0, 0x0a, 0x2d, 0x7d, 0x48, 0x4c, 0x64, 0x22, 0x00, 0xb4, 0x2a, 0x1d, 0xa3, 0x57, 0xf7, 0x74,
	0x47, 0x07, 0xa4, 0xca, 0x52, 0x9c, 0x5a, 0x55, 0xe5, 0xb5, 0xed, 0xdc, 0x31, 0x7a, 0xe7, 0xad,
	0x04, 0x71, 0xc0, 0xa4, 0x1c, 0xa4, 0x38, 0xf5, 0x14, 0x4a, 0x37, 0xc9, 0x83, 0x88, 0x5d, 0x9c,
	0xf8, 0x3c, 0xf6, 0x53, 0x21, 0x20, 0xf6, 0x2f, 0xad, 0x95, 0x8e, 0xd1, 0xab, 0x78, 0xeb, 0x11,
	0xbb, 0x18, 0xdd, 0x3e, 0xed, 0xee, 0x93, 0xb5, 0x45, 0x9c, 0xb6, 0x48, 0x2d, 0x95, 0x20, 0x62,
	0x16, 0xe5, 0x93, 0xa8, 0x7b, 0x45, 0x9f, 0x7d, 0x97, 0x30, 0x29, 0x3f, 0x70, 0x31, 0x56, 0xe7,
	0xac, 0x7b, 0x45, 0xdf, 0x3d, 0x24, 0x6b, 0xf9, 0x38, 0x65, 0xc2, 0x63, 0x09, 0x74, 0x44, 0x6a,
	0x12, 0x19, 0xa6, 0x12, 0xa4, 0x65, 0x74, 0x2a, 0xbd, 0x46, 0x7f, 0xf3, 0xce, 0x73, 0x1c, 0x2a,
	0xc0, 0x2b, 0xc0, 0xee, 0x4d, 0x99, 0x98, 0xf9, 0x43, 0xfa, 0x92, 0x98, 0xcc, 0xc7, 0x90, 0xc7,
	0xea, 0xad, 0xd6, 0x97, 0x70, 0x1b, 0x28, 0xb9, 0xa7, 0x31, 0x3a, 0x22, 0x44, 0x22, 0x13, 0x08,
	0xe3, 0x13, 0x86, 0x45, 0x4c, 0xf9, 0x7a, 0x3a, 0xf3, 0xf5, 0x74, 0xde, 0xcc, 0xd7, 0x73, 0x58,
	0xcb, 0x22, 0xfe, 0xf2, 0xbb, 0x6d, 0x78, 0x75, 0xcd, 0x0d, 0x30, 0x33, 0x49, 0x93, 0x31, 0xd3,
	0x26, 0x95, 0xfb, 0x98, 0x68, 0x6e, 0x80, 0x59, 0xec, 0x7c, 0x32, 0x91, 0x80, 0x2a, 0xe0, 0x8a,
	0xa7, 0x3b, 0xba, 0x41, 0x56, 0x90, 0x23, 0x3b, 0xd3, 0x49, 0xe5, 0x0d, 0x7d, 0x4d, 0xcc, 0x71,
	0x18, 0x80, 0x44, 0xcb, 0xcc, 0x46, 0x3e, 0xec, 0x67, 0x96, 0xbf, 0xae, 0xdb, 0x5b, 0x0b, 0xbb,
	0xcf, 0x13, 0x88, 0x8b, 0x71, 0x48, 0x37, 0xe0, 0xdb, 0x39, 0xe2, 0xec, 0xa9, 0x0f, 0x4f, 0x3b,
	0x50, 0x4a, 0xaa, 0x2a, 0xd8, 0x55, 0x15, 0x9e, 0xaa, 0xb7, 0xf6, 0x89, 0x99, 0x4f, 0x8a, 0x36,
	0xc8, 0xea, 0x11, 0x0b, 0x31, 0x8c, 0x83, 0x66, 0x89, 0xd6, 0xc9, 0xca, 0x91, 0x08, 0x11, 0x9a,
	0x06, 0x25, 0xc4, 0x1c, 0xf1, 0x28, 0x0a, 0xb1, 0x59, 0xa6, 0x35, 0x52, 0xdd, 0xe3, 0x31, 0x34,
	0x2b, 0xad, 0xf5, 0xcf, 0x5f, 0x6d, 0xe3, 0xfb, 0x37, 0x5b, 0xd3, 0x7d, 0xcc, 0xef, 0xd3, 0x61,
	0x1e, 0x05, 0x05, 0x52, 0xcd, 0x5a, 0xfa, 0xf8, 0xce, 0x9c, 0x16, 0x6e, 0x61, 0x6b, 0x7b, 0x49,
	0x75, 0xbe, 0x64, 0x4f, 0x8c, 0xe1, 0xf1, 0xd5, 0x8d, 0x5d, 0xfa, 0x79, 0x63, 0x97, 0x3e, 0xce,
	0x6c, 0xe3, 0x6a, 0x66, 0x1b, 0x3f, 0x66, 0xb6, 0xf1, 0x67, 0x66, 0x1b, 0xc7, 0xaf, 0xfe, 0xf7,
	0x8f, 0x6f, 0x57, 0x97, 0xef, 0x4a, 0xa7, 0xa6, 0x8a, 0xf4, 0xe9, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x47, 0x5f, 0x92, 0x5c, 0x45, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushServiceClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (PushService_PushClient, error)
}

type pushServiceClient struct {
	cc *grpc.ClientConn
}

func NewPushServiceClient(cc *grpc.ClientConn) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (PushService_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushService_serviceDesc.Streams[0], "/containerd.services.remtotes.v1.PushService/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushServicePushClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushService_PushClient interface {
	Recv() (*PushResponse, error)
	grpc.ClientStream
}

type pushServicePushClient struct {
	grpc.ClientStream
}

func (x *pushServicePushClient) Recv() (*PushResponse, error) {
	m := new(PushResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushServiceServer is the server API for PushService service.
type PushServiceServer interface {
	Push(*PushRequest, PushService_PushServer) error
}

// UnimplementedPushServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPushServiceServer struct {
}

func (*UnimplementedPushServiceServer) Push(req *PushRequest, srv PushService_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}

func RegisterPushServiceServer(s *grpc.Server, srv PushServiceServer) {
	s.RegisterService(&_PushService_serviceDesc, srv)
}

func _PushService_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PushRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushServiceServer).Push(m, &pushServicePushServer{stream})
}

type PushService_PushServer interface {
	Send(*PushResponse) error
	grpc.ServerStream
}

type pushServicePushServer struct {
	grpc.ServerStream
}

func (x *pushServicePushServer) Send(m *PushResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containerd.services.remtotes.v1.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _PushService_Push_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "github.com/containerd/containerd/api/services/remotes/v1/remotes.proto",
}

func (m *PushRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MaxConcurrency != 0 {
		i = encodeVarintRemotes(dAtA, i, uint64(m.MaxConcurrency))
		i--
		dAtA[i] = 0x28
	}
	if m.Auth != nil {
		{
			size, err := m.Auth.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintRemotes(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Platform != nil {
		{
			size, err := m.Platform.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRemotes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Source.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintRemotes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UserPassAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPassAuth) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPassAuth) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintRemotes(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintRemotes(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PushResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PushResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PushResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Statuses) > 0 {
		for iNdEx := len(m.Statuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRemotes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintRemotes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Digest) > 0 {
		i -= len(m.Digest)
		copy(dAtA[i:], m.Digest)
		i = encodeVarintRemotes(dAtA, i, uint64(len(m.Digest)))
		i--
		dAtA[i] = 0x32
	}
	if m.Total != 0 {
		i = encodeVarintRemotes(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x28
	}
	if m.Offset != 0 {
		i = encodeVarintRemotes(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintRemotes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1a
	n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintRemotes(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if m.Action != 0 {
		i = encodeVarintRemotes(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRemotes(dAtA []byte, offset int, v uint64) int {
	offset -= sovRemotes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PushRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Source.Size()
	n += 1 + l + sovRemotes(uint64(l))
	if m.Platform != nil {
		l = m.Platform.Size()
		n += 1 + l + sovRemotes(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRemotes(uint64(l))
	}
	if m.Auth != nil {
		l = m.Auth.Size()
		n += 1 + l + sovRemotes(uint64(l))
	}
	if m.MaxConcurrency != 0 {
		n += 1 + sovRemotes(uint64(m.MaxConcurrency))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserPassAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovRemotes(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovRemotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PushResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statuses) > 0 {
		for _, e := range m.Statuses {
			l = e.Size()
			n += 1 + l + sovRemotes(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Action != 0 {
		n += 1 + sovRemotes(uint64(m.Action))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartedAt)
	n += 1 + l + sovRemotes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovRemotes(uint64(l))
	if m.Offset != 0 {
		n += 1 + sovRemotes(uint64(m.Offset))
	}
	if m.Total != 0 {
		n += 1 + sovRemotes(uint64(m.Total))
	}
	l = len(m.Digest)
	if l > 0 {
		n += 1 + l + sovRemotes(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRemotes(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRemotes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRemotes(x uint64) (n int) {
	return sovRemotes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PushRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PushRequest{`,
		`Source:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Source), "Descriptor", "types.Descriptor", 1), `&`, ``, 1) + `,`,
		`Platform:` + strings.Replace(fmt.Sprintf("%v", this.Platform), "Platform", "types.Platform", 1) + `,`,
		`Target:` + fmt.Sprintf("%v", this.Target) + `,`,
		`Auth:` + strings.Replace(this.Auth.String(), "UserPassAuth", "UserPassAuth", 1) + `,`,
		`MaxConcurrency:` + fmt.Sprintf("%v", this.MaxConcurrency) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UserPassAuth) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UserPassAuth{`,
		`Username:` + fmt.Sprintf("%v", this.Username) + `,`,
		`Password:` + fmt.Sprintf("%v", this.Password) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PushResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForStatuses := "[]*Status{"
	for _, f := range this.Statuses {
		repeatedStringForStatuses += strings.Replace(f.String(), "Status", "Status", 1) + ","
	}
	repeatedStringForStatuses += "}"
	s := strings.Join([]string{`&PushResponse{`,
		`Statuses:` + repeatedStringForStatuses + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Status) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Status{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`StartedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.StartedAt), "Timestamp", "types1.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types1.Timestamp", 1), `&`, ``, 1) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Total:` + fmt.Sprintf("%v", this.Total) + `,`,
		`Digest:` + fmt.Sprintf("%v", this.Digest) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRemotes(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PushRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Source.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Platform == nil {
				m.Platform = &types.Platform{}
			}
			if err := m.Platform.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auth", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auth == nil {
				m.Auth = &UserPassAuth{}
			}
			if err := m.Auth.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrency", wireType)
			}
			m.MaxConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConcurrency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRemotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPassAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPassAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPassAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PushResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PushResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PushResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statuses = append(m.Statuses, &Status{})
			if err := m.Statuses[len(m.Statuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRemotes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= Action(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Digest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Digest = github_com_opencontainers_go_digest.Digest(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRemotes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRemotes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRemotes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRemotes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRemotes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRemotes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRemotes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRemotes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRemotes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRemotes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRemotes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRemotes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRemotes = fmt.Errorf("proto: unexpected end of group")
)
