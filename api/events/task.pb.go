//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/events/task.proto

package events

import (
	types "github.com/containerd/containerd/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskCreate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Bundle        string                 `protobuf:"bytes,2,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Rootfs        []*types.Mount         `protobuf:"bytes,3,rep,name=rootfs,proto3" json:"rootfs,omitempty"`
	IO            *TaskIO                `protobuf:"bytes,4,opt,name=io,proto3" json:"io,omitempty"`
	Checkpoint    string                 `protobuf:"bytes,5,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	Pid           uint32                 `protobuf:"varint,6,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCreate) Reset() {
	*x = TaskCreate{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCreate) ProtoMessage() {}

func (x *TaskCreate) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCreate.ProtoReflect.Descriptor instead.
func (*TaskCreate) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskCreate) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskCreate) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

func (x *TaskCreate) GetRootfs() []*types.Mount {
	if x != nil {
		return x.Rootfs
	}
	return nil
}

func (x *TaskCreate) GetIO() *TaskIO {
	if x != nil {
		return x.IO
	}
	return nil
}

func (x *TaskCreate) GetCheckpoint() string {
	if x != nil {
		return x.Checkpoint
	}
	return ""
}

func (x *TaskCreate) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type TaskStart struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid           uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskStart) Reset() {
	*x = TaskStart{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStart) ProtoMessage() {}

func (x *TaskStart) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStart.ProtoReflect.Descriptor instead.
func (*TaskStart) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskStart) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskStart) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type TaskDelete struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ContainerID string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Pid         uint32                 `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	ExitStatus  uint32                 `protobuf:"varint,3,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	ExitedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=exited_at,json=exitedAt,proto3" json:"exited_at,omitempty"`
	// id is the specific exec. By default if omitted will be `""` thus matches
	// the init exec of the task matching `container_id`.
	ID            string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskDelete) Reset() {
	*x = TaskDelete{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskDelete) ProtoMessage() {}

func (x *TaskDelete) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskDelete.ProtoReflect.Descriptor instead.
func (*TaskDelete) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskDelete) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskDelete) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TaskDelete) GetExitStatus() uint32 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *TaskDelete) GetExitedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExitedAt
	}
	return nil
}

func (x *TaskDelete) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type TaskIO struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stdin         string                 `protobuf:"bytes,1,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout        string                 `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string                 `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Terminal      bool                   `protobuf:"varint,4,opt,name=terminal,proto3" json:"terminal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskIO) Reset() {
	*x = TaskIO{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIO) ProtoMessage() {}

func (x *TaskIO) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIO.ProtoReflect.Descriptor instead.
func (*TaskIO) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{3}
}

func (x *TaskIO) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *TaskIO) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *TaskIO) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *TaskIO) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

type TaskExit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ID            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Pid           uint32                 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	ExitStatus    uint32                 `protobuf:"varint,4,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	ExitedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=exited_at,json=exitedAt,proto3" json:"exited_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskExit) Reset() {
	*x = TaskExit{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExit) ProtoMessage() {}

func (x *TaskExit) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExit.ProtoReflect.Descriptor instead.
func (*TaskExit) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{4}
}

func (x *TaskExit) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskExit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TaskExit) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *TaskExit) GetExitStatus() uint32 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *TaskExit) GetExitedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExitedAt
	}
	return nil
}

type TaskOOM struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskOOM) Reset() {
	*x = TaskOOM{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskOOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskOOM) ProtoMessage() {}

func (x *TaskOOM) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskOOM.ProtoReflect.Descriptor instead.
func (*TaskOOM) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{5}
}

func (x *TaskOOM) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type TaskExecAdded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecID        string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskExecAdded) Reset() {
	*x = TaskExecAdded{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecAdded) ProtoMessage() {}

func (x *TaskExecAdded) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecAdded.ProtoReflect.Descriptor instead.
func (*TaskExecAdded) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{6}
}

func (x *TaskExecAdded) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskExecAdded) GetExecID() string {
	if x != nil {
		return x.ExecID
	}
	return ""
}

type TaskExecStarted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ExecID        string                 `protobuf:"bytes,2,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Pid           uint32                 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskExecStarted) Reset() {
	*x = TaskExecStarted{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskExecStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskExecStarted) ProtoMessage() {}

func (x *TaskExecStarted) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskExecStarted.ProtoReflect.Descriptor instead.
func (*TaskExecStarted) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{7}
}

func (x *TaskExecStarted) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskExecStarted) GetExecID() string {
	if x != nil {
		return x.ExecID
	}
	return ""
}

func (x *TaskExecStarted) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type TaskPaused struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskPaused) Reset() {
	*x = TaskPaused{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPaused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPaused) ProtoMessage() {}

func (x *TaskPaused) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPaused.ProtoReflect.Descriptor instead.
func (*TaskPaused) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{8}
}

func (x *TaskPaused) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type TaskResumed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResumed) Reset() {
	*x = TaskResumed{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResumed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResumed) ProtoMessage() {}

func (x *TaskResumed) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResumed.ProtoReflect.Descriptor instead.
func (*TaskResumed) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{9}
}

func (x *TaskResumed) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

type TaskCheckpointed struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Checkpoint    string                 `protobuf:"bytes,2,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskCheckpointed) Reset() {
	*x = TaskCheckpointed{}
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskCheckpointed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskCheckpointed) ProtoMessage() {}

func (x *TaskCheckpointed) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_events_task_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskCheckpointed.ProtoReflect.Descriptor instead.
func (*TaskCheckpointed) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP(), []int{10}
}

func (x *TaskCheckpointed) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *TaskCheckpointed) GetCheckpoint() string {
	if x != nil {
		return x.Checkpoint
	}
	return ""
}

var File_github_com_containerd_containerd_api_events_task_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_events_task_proto_rawDesc = "" +
	"\n" +
	"6github.com/containerd/containerd/api/events/task.proto\x12\x11containerd.events\x1a\x1fgoogle/protobuf/timestamp.proto\x1a6github.com/containerd/containerd/api/types/mount.proto\x1a:github.com/containerd/containerd/api/types/fieldpath.proto\"\xd5\x01\n" +
	"\n" +
	"TaskCreate\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x16\n" +
	"\x06bundle\x18\x02 \x01(\tR\x06bundle\x12/\n" +
	"\x06rootfs\x18\x03 \x03(\v2\x17.containerd.types.MountR\x06rootfs\x12)\n" +
	"\x02io\x18\x04 \x01(\v2\x19.containerd.events.TaskIOR\x02io\x12\x1e\n" +
	"\n" +
	"checkpoint\x18\x05 \x01(\tR\n" +
	"checkpoint\x12\x10\n" +
	"\x03pid\x18\x06 \x01(\rR\x03pid\"@\n" +
	"\tTaskStart\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x10\n" +
	"\x03pid\x18\x02 \x01(\rR\x03pid\"\xab\x01\n" +
	"\n" +
	"TaskDelete\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x10\n" +
	"\x03pid\x18\x02 \x01(\rR\x03pid\x12\x1f\n" +
	"\vexit_status\x18\x03 \x01(\rR\n" +
	"exitStatus\x127\n" +
	"\texited_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bexitedAt\x12\x0e\n" +
	"\x02id\x18\x05 \x01(\tR\x02id\"j\n" +
	"\x06TaskIO\x12\x14\n" +
	"\x05stdin\x18\x01 \x01(\tR\x05stdin\x12\x16\n" +
	"\x06stdout\x18\x02 \x01(\tR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x03 \x01(\tR\x06stderr\x12\x1a\n" +
	"\bterminal\x18\x04 \x01(\bR\bterminal\"\xa9\x01\n" +
	"\bTaskExit\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x10\n" +
	"\x03pid\x18\x03 \x01(\rR\x03pid\x12\x1f\n" +
	"\vexit_status\x18\x04 \x01(\rR\n" +
	"exitStatus\x127\n" +
	"\texited_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\bexitedAt\",\n" +
	"\aTaskOOM\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\"K\n" +
	"\rTaskExecAdded\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\"_\n" +
	"\x0fTaskExecStarted\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x17\n" +
	"\aexec_id\x18\x02 \x01(\tR\x06execId\x12\x10\n" +
	"\x03pid\x18\x03 \x01(\rR\x03pid\"/\n" +
	"\n" +
	"TaskPaused\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\"0\n" +
	"\vTaskResumed\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\"U\n" +
	"\x10TaskCheckpointed\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1e\n" +
	"\n" +
	"checkpoint\x18\x02 \x01(\tR\n" +
	"checkpointB8\xa0\xf4\x1e\x01Z2github.com/containerd/containerd/api/events;eventsb\x06proto3"

var (
	file_github_com_containerd_containerd_api_events_task_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_events_task_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_events_task_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_events_task_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_events_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_events_task_proto_rawDesc), len(file_github_com_containerd_containerd_api_events_task_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_events_task_proto_rawDescData
}

var file_github_com_containerd_containerd_api_events_task_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_containerd_containerd_api_events_task_proto_goTypes = []any{
	(*TaskCreate)(nil),            // 0: containerd.events.TaskCreate
	(*TaskStart)(nil),             // 1: containerd.events.TaskStart
	(*TaskDelete)(nil),            // 2: containerd.events.TaskDelete
	(*TaskIO)(nil),                // 3: containerd.events.TaskIO
	(*TaskExit)(nil),              // 4: containerd.events.TaskExit
	(*TaskOOM)(nil),               // 5: containerd.events.TaskOOM
	(*TaskExecAdded)(nil),         // 6: containerd.events.TaskExecAdded
	(*TaskExecStarted)(nil),       // 7: containerd.events.TaskExecStarted
	(*TaskPaused)(nil),            // 8: containerd.events.TaskPaused
	(*TaskResumed)(nil),           // 9: containerd.events.TaskResumed
	(*TaskCheckpointed)(nil),      // 10: containerd.events.TaskCheckpointed
	(*types.Mount)(nil),           // 11: containerd.types.Mount
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_github_com_containerd_containerd_api_events_task_proto_depIdxs = []int32{
	11, // 0: containerd.events.TaskCreate.rootfs:type_name -> containerd.types.Mount
	3,  // 1: containerd.events.TaskCreate.io:type_name -> containerd.events.TaskIO
	12, // 2: containerd.events.TaskDelete.exited_at:type_name -> google.protobuf.Timestamp
	12, // 3: containerd.events.TaskExit.exited_at:type_name -> google.protobuf.Timestamp
	4,  // [4:4] is the sub-list for method output_type
	4,  // [4:4] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_events_task_proto_init() }
func file_github_com_containerd_containerd_api_events_task_proto_init() {
	if File_github_com_containerd_containerd_api_events_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_events_task_proto_rawDesc), len(file_github_com_containerd_containerd_api_events_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_containerd_containerd_api_events_task_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_events_task_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_events_task_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_events_task_proto = out.File
	file_github_com_containerd_containerd_api_events_task_proto_goTypes = nil
	file_github_com_containerd_containerd_api_events_task_proto_depIdxs = nil
}
