//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/types/task/task.proto

package task

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_UNKNOWN Status = 0
	Status_CREATED Status = 1
	Status_RUNNING Status = 2
	Status_STOPPED Status = 3
	Status_PAUSED  Status = 4
	Status_PAUSING Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATED",
		2: "RUNNING",
		3: "STOPPED",
		4: "PAUSED",
		5: "PAUSING",
	}
	Status_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATED": 1,
		"RUNNING": 2,
		"STOPPED": 3,
		"PAUSED":  4,
		"PAUSING": 5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_containerd_containerd_api_types_task_task_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_github_com_containerd_containerd_api_types_task_task_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_task_task_proto_rawDescGZIP(), []int{0}
}

type Process struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerID   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ID            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Pid           uint32                 `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Status        Status                 `protobuf:"varint,4,opt,name=status,proto3,enum=containerd.v1.types.Status" json:"status,omitempty"`
	Stdin         string                 `protobuf:"bytes,5,opt,name=stdin,proto3" json:"stdin,omitempty"`
	Stdout        string                 `protobuf:"bytes,6,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr        string                 `protobuf:"bytes,7,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Terminal      bool                   `protobuf:"varint,8,opt,name=terminal,proto3" json:"terminal,omitempty"`
	ExitStatus    uint32                 `protobuf:"varint,9,opt,name=exit_status,json=exitStatus,proto3" json:"exit_status,omitempty"`
	ExitedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=exited_at,json=exitedAt,proto3" json:"exited_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Process) Reset() {
	*x = Process{}
	mi := &file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_task_task_proto_rawDescGZIP(), []int{0}
}

func (x *Process) GetContainerID() string {
	if x != nil {
		return x.ContainerID
	}
	return ""
}

func (x *Process) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Process) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Process) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

func (x *Process) GetStdin() string {
	if x != nil {
		return x.Stdin
	}
	return ""
}

func (x *Process) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Process) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

func (x *Process) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *Process) GetExitStatus() uint32 {
	if x != nil {
		return x.ExitStatus
	}
	return 0
}

func (x *Process) GetExitedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExitedAt
	}
	return nil
}

type ProcessInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PID is the process ID.
	Pid uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Info contains additional process information.
	//
	// Info varies by platform.
	Info          *anypb.Any `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessInfo) Reset() {
	*x = ProcessInfo{}
	mi := &file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessInfo) ProtoMessage() {}

func (x *ProcessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessInfo.ProtoReflect.Descriptor instead.
func (*ProcessInfo) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_task_task_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessInfo) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ProcessInfo) GetInfo() *anypb.Any {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_github_com_containerd_containerd_api_types_task_task_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_types_task_task_proto_rawDesc = "" +
	"\n" +
	":github.com/containerd/containerd/api/types/task/task.proto\x12\x13containerd.v1.types\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\"\xbf\x02\n" +
	"\aProcess\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x10\n" +
	"\x03pid\x18\x03 \x01(\rR\x03pid\x123\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1b.containerd.v1.types.StatusR\x06status\x12\x14\n" +
	"\x05stdin\x18\x05 \x01(\tR\x05stdin\x12\x16\n" +
	"\x06stdout\x18\x06 \x01(\tR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\a \x01(\tR\x06stderr\x12\x1a\n" +
	"\bterminal\x18\b \x01(\bR\bterminal\x12\x1f\n" +
	"\vexit_status\x18\t \x01(\rR\n" +
	"exitStatus\x127\n" +
	"\texited_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\bexitedAt\"I\n" +
	"\vProcessInfo\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\rR\x03pid\x12(\n" +
	"\x04info\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x04info*U\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\v\n" +
	"\aCREATED\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\v\n" +
	"\aSTOPPED\x10\x03\x12\n" +
	"\n" +
	"\x06PAUSED\x10\x04\x12\v\n" +
	"\aPAUSING\x10\x05B1Z/github.com/containerd/containerd/api/types/taskb\x06proto3"

var (
	file_github_com_containerd_containerd_api_types_task_task_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_types_task_task_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_types_task_task_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_types_task_task_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_types_task_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_task_task_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_task_task_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_types_task_task_proto_rawDescData
}

var file_github_com_containerd_containerd_api_types_task_task_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_containerd_containerd_api_types_task_task_proto_goTypes = []any{
	(Status)(0),                   // 0: containerd.v1.types.Status
	(*Process)(nil),               // 1: containerd.v1.types.Process
	(*ProcessInfo)(nil),           // 2: containerd.v1.types.ProcessInfo
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 4: google.protobuf.Any
}
var file_github_com_containerd_containerd_api_types_task_task_proto_depIdxs = []int32{
	0, // 0: containerd.v1.types.Process.status:type_name -> containerd.v1.types.Status
	3, // 1: containerd.v1.types.Process.exited_at:type_name -> google.protobuf.Timestamp
	4, // 2: containerd.v1.types.ProcessInfo.info:type_name -> google.protobuf.Any
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_types_task_task_proto_init() }
func file_github_com_containerd_containerd_api_types_task_task_proto_init() {
	if File_github_com_containerd_containerd_api_types_task_task_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_task_task_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_task_task_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_containerd_containerd_api_types_task_task_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_types_task_task_proto_depIdxs,
		EnumInfos:         file_github_com_containerd_containerd_api_types_task_task_proto_enumTypes,
		MessageInfos:      file_github_com_containerd_containerd_api_types_task_task_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_types_task_task_proto = out.File
	file_github_com_containerd_containerd_api_types_task_task_proto_goTypes = nil
	file_github_com_containerd_containerd_api_types_task_task_proto_depIdxs = nil
}
