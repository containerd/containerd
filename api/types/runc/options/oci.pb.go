// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/types/runc/options/oci.proto

package options

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Options struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// disable pivot root when creating a container
	NoPivotRoot bool `protobuf:"varint,1,opt,name=no_pivot_root,json=noPivotRoot,proto3" json:"no_pivot_root,omitempty"`
	// create a new keyring for the container
	NoNewKeyring bool `protobuf:"varint,2,opt,name=no_new_keyring,json=noNewKeyring,proto3" json:"no_new_keyring,omitempty"`
	// place the shim in a cgroup
	ShimCgroup string `protobuf:"bytes,3,opt,name=shim_cgroup,json=shimCgroup,proto3" json:"shim_cgroup,omitempty"`
	// set the I/O's pipes uid
	IoUid uint32 `protobuf:"varint,4,opt,name=io_uid,json=ioUid,proto3" json:"io_uid,omitempty"`
	// set the I/O's pipes gid
	IoGid uint32 `protobuf:"varint,5,opt,name=io_gid,json=ioGid,proto3" json:"io_gid,omitempty"`
	// binary name of the runc binary
	BinaryName string `protobuf:"bytes,6,opt,name=binary_name,json=binaryName,proto3" json:"binary_name,omitempty"`
	// runc root directory
	Root string `protobuf:"bytes,7,opt,name=root,proto3" json:"root,omitempty"`
	// enable systemd cgroups
	SystemdCgroup bool `protobuf:"varint,9,opt,name=systemd_cgroup,json=systemdCgroup,proto3" json:"systemd_cgroup,omitempty"`
	// criu image path
	CriuImagePath string `protobuf:"bytes,10,opt,name=criu_image_path,json=criuImagePath,proto3" json:"criu_image_path,omitempty"`
	// criu work path
	CriuWorkPath string `protobuf:"bytes,11,opt,name=criu_work_path,json=criuWorkPath,proto3" json:"criu_work_path,omitempty"`
	// task api address, can be a unix domain socket, or vsock address.
	// it is in the form of ttrpc+unix://path/to/uds or grpc+vsock://<vsock cid>:<port>.
	TaskApiAddress string `protobuf:"bytes,12,opt,name=task_api_address,json=taskApiAddress,proto3" json:"task_api_address,omitempty"`
	// task api version, currently supported value is 2 and 3.
	TaskApiVersion uint32 `protobuf:"varint,13,opt,name=task_api_version,json=taskApiVersion,proto3" json:"task_api_version,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Options) Reset() {
	*x = Options{}
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescGZIP(), []int{0}
}

func (x *Options) GetNoPivotRoot() bool {
	if x != nil {
		return x.NoPivotRoot
	}
	return false
}

func (x *Options) GetNoNewKeyring() bool {
	if x != nil {
		return x.NoNewKeyring
	}
	return false
}

func (x *Options) GetShimCgroup() string {
	if x != nil {
		return x.ShimCgroup
	}
	return ""
}

func (x *Options) GetIoUid() uint32 {
	if x != nil {
		return x.IoUid
	}
	return 0
}

func (x *Options) GetIoGid() uint32 {
	if x != nil {
		return x.IoGid
	}
	return 0
}

func (x *Options) GetBinaryName() string {
	if x != nil {
		return x.BinaryName
	}
	return ""
}

func (x *Options) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

func (x *Options) GetSystemdCgroup() bool {
	if x != nil {
		return x.SystemdCgroup
	}
	return false
}

func (x *Options) GetCriuImagePath() string {
	if x != nil {
		return x.CriuImagePath
	}
	return ""
}

func (x *Options) GetCriuWorkPath() string {
	if x != nil {
		return x.CriuWorkPath
	}
	return ""
}

func (x *Options) GetTaskApiAddress() string {
	if x != nil {
		return x.TaskApiAddress
	}
	return ""
}

func (x *Options) GetTaskApiVersion() uint32 {
	if x != nil {
		return x.TaskApiVersion
	}
	return 0
}

type CheckpointOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// exit the container after a checkpoint
	Exit bool `protobuf:"varint,1,opt,name=exit,proto3" json:"exit,omitempty"`
	// checkpoint open tcp connections
	OpenTcp bool `protobuf:"varint,2,opt,name=open_tcp,json=openTcp,proto3" json:"open_tcp,omitempty"`
	// checkpoint external unix sockets
	ExternalUnixSockets bool `protobuf:"varint,3,opt,name=external_unix_sockets,json=externalUnixSockets,proto3" json:"external_unix_sockets,omitempty"`
	// checkpoint terminals (ptys)
	Terminal bool `protobuf:"varint,4,opt,name=terminal,proto3" json:"terminal,omitempty"`
	// allow checkpointing of file locks
	FileLocks bool `protobuf:"varint,5,opt,name=file_locks,json=fileLocks,proto3" json:"file_locks,omitempty"`
	// restore provided namespaces as empty namespaces
	EmptyNamespaces []string `protobuf:"bytes,6,rep,name=empty_namespaces,json=emptyNamespaces,proto3" json:"empty_namespaces,omitempty"`
	// set the cgroups mode, soft, full, strict
	CgroupsMode string `protobuf:"bytes,7,opt,name=cgroups_mode,json=cgroupsMode,proto3" json:"cgroups_mode,omitempty"`
	// checkpoint image path
	ImagePath string `protobuf:"bytes,8,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// checkpoint work path
	WorkPath      string `protobuf:"bytes,9,opt,name=work_path,json=workPath,proto3" json:"work_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckpointOptions) Reset() {
	*x = CheckpointOptions{}
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckpointOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckpointOptions) ProtoMessage() {}

func (x *CheckpointOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckpointOptions.ProtoReflect.Descriptor instead.
func (*CheckpointOptions) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescGZIP(), []int{1}
}

func (x *CheckpointOptions) GetExit() bool {
	if x != nil {
		return x.Exit
	}
	return false
}

func (x *CheckpointOptions) GetOpenTcp() bool {
	if x != nil {
		return x.OpenTcp
	}
	return false
}

func (x *CheckpointOptions) GetExternalUnixSockets() bool {
	if x != nil {
		return x.ExternalUnixSockets
	}
	return false
}

func (x *CheckpointOptions) GetTerminal() bool {
	if x != nil {
		return x.Terminal
	}
	return false
}

func (x *CheckpointOptions) GetFileLocks() bool {
	if x != nil {
		return x.FileLocks
	}
	return false
}

func (x *CheckpointOptions) GetEmptyNamespaces() []string {
	if x != nil {
		return x.EmptyNamespaces
	}
	return nil
}

func (x *CheckpointOptions) GetCgroupsMode() string {
	if x != nil {
		return x.CgroupsMode
	}
	return ""
}

func (x *CheckpointOptions) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *CheckpointOptions) GetWorkPath() string {
	if x != nil {
		return x.WorkPath
	}
	return ""
}

type ProcessDetails struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// exec process id if the process is managed by a shim
	ExecID        string `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessDetails) Reset() {
	*x = ProcessDetails{}
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDetails) ProtoMessage() {}

func (x *ProcessDetails) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDetails.ProtoReflect.Descriptor instead.
func (*ProcessDetails) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescGZIP(), []int{2}
}

func (x *ProcessDetails) GetExecID() string {
	if x != nil {
		return x.ExecID
	}
	return ""
}

var File_github_com_containerd_containerd_api_types_runc_options_oci_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDesc = "" +
	"\n" +
	"Agithub.com/containerd/containerd/api/types/runc/options/oci.proto\x12\x12containerd.runc.v1\"\xa6\x03\n" +
	"\aOptions\x12\"\n" +
	"\rno_pivot_root\x18\x01 \x01(\bR\vnoPivotRoot\x12$\n" +
	"\x0eno_new_keyring\x18\x02 \x01(\bR\fnoNewKeyring\x12\x1f\n" +
	"\vshim_cgroup\x18\x03 \x01(\tR\n" +
	"shimCgroup\x12\x15\n" +
	"\x06io_uid\x18\x04 \x01(\rR\x05ioUid\x12\x15\n" +
	"\x06io_gid\x18\x05 \x01(\rR\x05ioGid\x12\x1f\n" +
	"\vbinary_name\x18\x06 \x01(\tR\n" +
	"binaryName\x12\x12\n" +
	"\x04root\x18\a \x01(\tR\x04root\x12%\n" +
	"\x0esystemd_cgroup\x18\t \x01(\bR\rsystemdCgroup\x12&\n" +
	"\x0fcriu_image_path\x18\n" +
	" \x01(\tR\rcriuImagePath\x12$\n" +
	"\x0ecriu_work_path\x18\v \x01(\tR\fcriuWorkPath\x12(\n" +
	"\x10task_api_address\x18\f \x01(\tR\x0etaskApiAddress\x12(\n" +
	"\x10task_api_version\x18\r \x01(\rR\x0etaskApiVersionJ\x04\b\b\x10\t\"\xbb\x02\n" +
	"\x11CheckpointOptions\x12\x12\n" +
	"\x04exit\x18\x01 \x01(\bR\x04exit\x12\x19\n" +
	"\bopen_tcp\x18\x02 \x01(\bR\aopenTcp\x122\n" +
	"\x15external_unix_sockets\x18\x03 \x01(\bR\x13externalUnixSockets\x12\x1a\n" +
	"\bterminal\x18\x04 \x01(\bR\bterminal\x12\x1d\n" +
	"\n" +
	"file_locks\x18\x05 \x01(\bR\tfileLocks\x12)\n" +
	"\x10empty_namespaces\x18\x06 \x03(\tR\x0femptyNamespaces\x12!\n" +
	"\fcgroups_mode\x18\a \x01(\tR\vcgroupsMode\x12\x1d\n" +
	"\n" +
	"image_path\x18\b \x01(\tR\timagePath\x12\x1b\n" +
	"\twork_path\x18\t \x01(\tR\bworkPath\")\n" +
	"\x0eProcessDetails\x12\x17\n" +
	"\aexec_id\x18\x01 \x01(\tR\x06execIdBAZ?github.com/containerd/containerd/api/types/runc/options;optionsb\x06proto3"

var (
	file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDescData
}

var file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_github_com_containerd_containerd_api_types_runc_options_oci_proto_goTypes = []any{
	(*Options)(nil),           // 0: containerd.runc.v1.Options
	(*CheckpointOptions)(nil), // 1: containerd.runc.v1.CheckpointOptions
	(*ProcessDetails)(nil),    // 2: containerd.runc.v1.ProcessDetails
}
var file_github_com_containerd_containerd_api_types_runc_options_oci_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_types_runc_options_oci_proto_init() }
func file_github_com_containerd_containerd_api_types_runc_options_oci_proto_init() {
	if File_github_com_containerd_containerd_api_types_runc_options_oci_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_runc_options_oci_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_containerd_containerd_api_types_runc_options_oci_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_types_runc_options_oci_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_types_runc_options_oci_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_types_runc_options_oci_proto = out.File
	file_github_com_containerd_containerd_api_types_runc_options_oci_proto_goTypes = nil
	file_github_com_containerd_containerd_api_types_runc_options_oci_proto_depIdxs = nil
}
