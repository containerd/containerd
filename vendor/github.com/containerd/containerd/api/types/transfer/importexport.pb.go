//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/types/transfer/importexport.proto

package transfer

import (
	types "github.com/containerd/containerd/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageImportStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stream is used to identify the binary input stream for the import operation.
	// The stream uses the transfer binary stream protocol with the client as the sender.
	// The binary data is expected to be a raw tar stream.
	Stream        string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	MediaType     string `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	ForceCompress bool   `protobuf:"varint,3,opt,name=force_compress,json=forceCompress,proto3" json:"force_compress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageImportStream) Reset() {
	*x = ImageImportStream{}
	mi := &file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageImportStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageImportStream) ProtoMessage() {}

func (x *ImageImportStream) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageImportStream.ProtoReflect.Descriptor instead.
func (*ImageImportStream) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescGZIP(), []int{0}
}

func (x *ImageImportStream) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ImageImportStream) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *ImageImportStream) GetForceCompress() bool {
	if x != nil {
		return x.ForceCompress
	}
	return false
}

type ImageExportStream struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Stream is used to identify the binary output stream for the export operation.
	// The stream uses the transfer binary stream protocol with the server as the sender.
	// The binary data is expected to be a raw tar stream.
	Stream    string `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
	MediaType string `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// The specified platforms
	Platforms []*types.Platform `protobuf:"bytes,3,rep,name=platforms,proto3" json:"platforms,omitempty"`
	// Whether to include all platforms
	AllPlatforms bool `protobuf:"varint,4,opt,name=all_platforms,json=allPlatforms,proto3" json:"all_platforms,omitempty"`
	// Skips the creation of the Docker compatible manifest.json file
	SkipCompatibilityManifest bool `protobuf:"varint,5,opt,name=skip_compatibility_manifest,json=skipCompatibilityManifest,proto3" json:"skip_compatibility_manifest,omitempty"`
	// Excludes non-distributable blobs such as Windows base layers.
	SkipNonDistributable bool `protobuf:"varint,6,opt,name=skip_non_distributable,json=skipNonDistributable,proto3" json:"skip_non_distributable,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ImageExportStream) Reset() {
	*x = ImageExportStream{}
	mi := &file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageExportStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageExportStream) ProtoMessage() {}

func (x *ImageExportStream) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageExportStream.ProtoReflect.Descriptor instead.
func (*ImageExportStream) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescGZIP(), []int{1}
}

func (x *ImageExportStream) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ImageExportStream) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *ImageExportStream) GetPlatforms() []*types.Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *ImageExportStream) GetAllPlatforms() bool {
	if x != nil {
		return x.AllPlatforms
	}
	return false
}

func (x *ImageExportStream) GetSkipCompatibilityManifest() bool {
	if x != nil {
		return x.SkipCompatibilityManifest
	}
	return false
}

func (x *ImageExportStream) GetSkipNonDistributable() bool {
	if x != nil {
		return x.SkipNonDistributable
	}
	return false
}

var File_github_com_containerd_containerd_api_types_transfer_importexport_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDesc = "" +
	"\n" +
	"Fgithub.com/containerd/containerd/api/types/transfer/importexport.proto\x12\x19containerd.types.transfer\x1a9github.com/containerd/containerd/api/types/platform.proto\"q\n" +
	"\x11ImageImportStream\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12\x1d\n" +
	"\n" +
	"media_type\x18\x02 \x01(\tR\tmediaType\x12%\n" +
	"\x0eforce_compress\x18\x03 \x01(\bR\rforceCompress\"\x9f\x02\n" +
	"\x11ImageExportStream\x12\x16\n" +
	"\x06stream\x18\x01 \x01(\tR\x06stream\x12\x1d\n" +
	"\n" +
	"media_type\x18\x02 \x01(\tR\tmediaType\x128\n" +
	"\tplatforms\x18\x03 \x03(\v2\x1a.containerd.types.PlatformR\tplatforms\x12#\n" +
	"\rall_platforms\x18\x04 \x01(\bR\fallPlatforms\x12>\n" +
	"\x1bskip_compatibility_manifest\x18\x05 \x01(\bR\x19skipCompatibilityManifest\x124\n" +
	"\x16skip_non_distributable\x18\x06 \x01(\bR\x14skipNonDistributableB5Z3github.com/containerd/containerd/api/types/transferb\x06proto3"

var (
	file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDescData
}

var file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_github_com_containerd_containerd_api_types_transfer_importexport_proto_goTypes = []any{
	(*ImageImportStream)(nil), // 0: containerd.types.transfer.ImageImportStream
	(*ImageExportStream)(nil), // 1: containerd.types.transfer.ImageExportStream
	(*types.Platform)(nil),    // 2: containerd.types.Platform
}
var file_github_com_containerd_containerd_api_types_transfer_importexport_proto_depIdxs = []int32{
	2, // 0: containerd.types.transfer.ImageExportStream.platforms:type_name -> containerd.types.Platform
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_types_transfer_importexport_proto_init() }
func file_github_com_containerd_containerd_api_types_transfer_importexport_proto_init() {
	if File_github_com_containerd_containerd_api_types_transfer_importexport_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_transfer_importexport_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_containerd_containerd_api_types_transfer_importexport_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_types_transfer_importexport_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_types_transfer_importexport_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_types_transfer_importexport_proto = out.File
	file_github_com_containerd_containerd_api_types_transfer_importexport_proto_goTypes = nil
	file_github_com_containerd_containerd_api_types_transfer_importexport_proto_depIdxs = nil
}
