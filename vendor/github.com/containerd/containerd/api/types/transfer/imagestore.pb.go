//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/types/transfer/imagestore.proto

package transfer

import (
	types "github.com/containerd/containerd/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ImageStore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Labels        map[string]string      `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Platforms     []*types.Platform      `protobuf:"bytes,3,rep,name=platforms,proto3" json:"platforms,omitempty"`
	AllMetadata   bool                   `protobuf:"varint,4,opt,name=all_metadata,json=allMetadata,proto3" json:"all_metadata,omitempty"`
	ManifestLimit uint32                 `protobuf:"varint,5,opt,name=manifest_limit,json=manifestLimit,proto3" json:"manifest_limit,omitempty"`
	// extra_references are used to set image names on imports of sub-images from the index
	ExtraReferences       []*ImageReference      `protobuf:"bytes,6,rep,name=extra_references,json=extraReferences,proto3" json:"extra_references,omitempty"`
	Unpacks               []*UnpackConfiguration `protobuf:"bytes,10,rep,name=unpacks,proto3" json:"unpacks,omitempty"`
	DiscardUnpackedLayers bool                   `protobuf:"varint,11,opt,name=discard_unpacked_layers,json=discardUnpackedLayers,proto3" json:"discard_unpacked_layers,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ImageStore) Reset() {
	*x = ImageStore{}
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageStore) ProtoMessage() {}

func (x *ImageStore) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageStore.ProtoReflect.Descriptor instead.
func (*ImageStore) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescGZIP(), []int{0}
}

func (x *ImageStore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageStore) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ImageStore) GetPlatforms() []*types.Platform {
	if x != nil {
		return x.Platforms
	}
	return nil
}

func (x *ImageStore) GetAllMetadata() bool {
	if x != nil {
		return x.AllMetadata
	}
	return false
}

func (x *ImageStore) GetManifestLimit() uint32 {
	if x != nil {
		return x.ManifestLimit
	}
	return 0
}

func (x *ImageStore) GetExtraReferences() []*ImageReference {
	if x != nil {
		return x.ExtraReferences
	}
	return nil
}

func (x *ImageStore) GetUnpacks() []*UnpackConfiguration {
	if x != nil {
		return x.Unpacks
	}
	return nil
}

func (x *ImageStore) GetDiscardUnpackedLayers() bool {
	if x != nil {
		return x.DiscardUnpackedLayers
	}
	return false
}

type UnpackConfiguration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// platform is the platform to unpack for, used for resolving manifest and snapshotter
	// if not provided
	Platform *types.Platform `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// snapshotter to unpack to, if not provided default for platform shoudl be used
	Snapshotter   string `protobuf:"bytes,2,opt,name=snapshotter,proto3" json:"snapshotter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnpackConfiguration) Reset() {
	*x = UnpackConfiguration{}
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnpackConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackConfiguration) ProtoMessage() {}

func (x *UnpackConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackConfiguration.ProtoReflect.Descriptor instead.
func (*UnpackConfiguration) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescGZIP(), []int{1}
}

func (x *UnpackConfiguration) GetPlatform() *types.Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *UnpackConfiguration) GetSnapshotter() string {
	if x != nil {
		return x.Snapshotter
	}
	return ""
}

// ImageReference is used to create or find a reference for an image
type ImageReference struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// is_prefix determines whether the Name should be considered
	// a prefix (without tag or digest).
	// For lookup, this may allow matching multiple tags.
	// For store, this must have a tag or digest added.
	IsPrefix bool `protobuf:"varint,2,opt,name=is_prefix,json=isPrefix,proto3" json:"is_prefix,omitempty"`
	// allow_overwrite allows overwriting or ignoring the name if
	// another reference is provided (such as through an annotation).
	// Only used if IsPrefix is true.
	AllowOverwrite bool `protobuf:"varint,3,opt,name=allow_overwrite,json=allowOverwrite,proto3" json:"allow_overwrite,omitempty"`
	// add_digest adds the manifest digest to the reference.
	// For lookup, this allows matching tags with any digest.
	// For store, this allows adding the digest to the name.
	// Only used if IsPrefix is true.
	AddDigest bool `protobuf:"varint,4,opt,name=add_digest,json=addDigest,proto3" json:"add_digest,omitempty"`
	// skip_named_digest only considers digest references which do not
	// have a non-digested named reference.
	// For lookup, this will deduplicate digest references when there is a named match.
	// For store, this only adds this digest reference when there is no matching full
	// name reference from the prefix.
	// Only used if IsPrefix is true.
	SkipNamedDigest bool `protobuf:"varint,5,opt,name=skip_named_digest,json=skipNamedDigest,proto3" json:"skip_named_digest,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ImageReference) Reset() {
	*x = ImageReference{}
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageReference) ProtoMessage() {}

func (x *ImageReference) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageReference.ProtoReflect.Descriptor instead.
func (*ImageReference) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescGZIP(), []int{2}
}

func (x *ImageReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageReference) GetIsPrefix() bool {
	if x != nil {
		return x.IsPrefix
	}
	return false
}

func (x *ImageReference) GetAllowOverwrite() bool {
	if x != nil {
		return x.AllowOverwrite
	}
	return false
}

func (x *ImageReference) GetAddDigest() bool {
	if x != nil {
		return x.AddDigest
	}
	return false
}

func (x *ImageReference) GetSkipNamedDigest() bool {
	if x != nil {
		return x.SkipNamedDigest
	}
	return false
}

var File_github_com_containerd_containerd_api_types_transfer_imagestore_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDesc = "" +
	"\n" +
	"Dgithub.com/containerd/containerd/api/types/transfer/imagestore.proto\x12\x19containerd.types.transfer\x1a9github.com/containerd/containerd/api/types/platform.proto\"\x82\x04\n" +
	"\n" +
	"ImageStore\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12I\n" +
	"\x06labels\x18\x02 \x03(\v21.containerd.types.transfer.ImageStore.LabelsEntryR\x06labels\x128\n" +
	"\tplatforms\x18\x03 \x03(\v2\x1a.containerd.types.PlatformR\tplatforms\x12!\n" +
	"\fall_metadata\x18\x04 \x01(\bR\vallMetadata\x12%\n" +
	"\x0emanifest_limit\x18\x05 \x01(\rR\rmanifestLimit\x12T\n" +
	"\x10extra_references\x18\x06 \x03(\v2).containerd.types.transfer.ImageReferenceR\x0fextraReferences\x12H\n" +
	"\aunpacks\x18\n" +
	" \x03(\v2..containerd.types.transfer.UnpackConfigurationR\aunpacks\x126\n" +
	"\x17discard_unpacked_layers\x18\v \x01(\bR\x15discardUnpackedLayers\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"o\n" +
	"\x13UnpackConfiguration\x126\n" +
	"\bplatform\x18\x01 \x01(\v2\x1a.containerd.types.PlatformR\bplatform\x12 \n" +
	"\vsnapshotter\x18\x02 \x01(\tR\vsnapshotter\"\xb5\x01\n" +
	"\x0eImageReference\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tis_prefix\x18\x02 \x01(\bR\bisPrefix\x12'\n" +
	"\x0fallow_overwrite\x18\x03 \x01(\bR\x0eallowOverwrite\x12\x1d\n" +
	"\n" +
	"add_digest\x18\x04 \x01(\bR\taddDigest\x12*\n" +
	"\x11skip_named_digest\x18\x05 \x01(\bR\x0fskipNamedDigestB5Z3github.com/containerd/containerd/api/types/transferb\x06proto3"

var (
	file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDescData
}

var file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_goTypes = []any{
	(*ImageStore)(nil),          // 0: containerd.types.transfer.ImageStore
	(*UnpackConfiguration)(nil), // 1: containerd.types.transfer.UnpackConfiguration
	(*ImageReference)(nil),      // 2: containerd.types.transfer.ImageReference
	nil,                         // 3: containerd.types.transfer.ImageStore.LabelsEntry
	(*types.Platform)(nil),      // 4: containerd.types.Platform
}
var file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_depIdxs = []int32{
	3, // 0: containerd.types.transfer.ImageStore.labels:type_name -> containerd.types.transfer.ImageStore.LabelsEntry
	4, // 1: containerd.types.transfer.ImageStore.platforms:type_name -> containerd.types.Platform
	2, // 2: containerd.types.transfer.ImageStore.extra_references:type_name -> containerd.types.transfer.ImageReference
	1, // 3: containerd.types.transfer.ImageStore.unpacks:type_name -> containerd.types.transfer.UnpackConfiguration
	4, // 4: containerd.types.transfer.UnpackConfiguration.platform:type_name -> containerd.types.Platform
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_init() }
func file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_init() {
	if File_github_com_containerd_containerd_api_types_transfer_imagestore_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDesc), len(file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_types_transfer_imagestore_proto = out.File
	file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_goTypes = nil
	file_github_com_containerd_containerd_api_types_transfer_imagestore_proto_depIdxs = nil
}
