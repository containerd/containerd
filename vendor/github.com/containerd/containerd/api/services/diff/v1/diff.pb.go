//
//Copyright The containerd Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: github.com/containerd/containerd/api/services/diff/v1/diff.proto

package diff

import (
	types "github.com/containerd/containerd/api/types"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Diff is the descriptor of the diff to be extracted
	Diff     *types.Descriptor     `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
	Mounts   []*types.Mount        `protobuf:"bytes,2,rep,name=mounts,proto3" json:"mounts,omitempty"`
	Payloads map[string]*anypb.Any `protobuf:"bytes,3,rep,name=payloads,proto3" json:"payloads,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// SyncFs is to synchronize the underlying filesystem containing files.
	SyncFs        bool `protobuf:"varint,4,opt,name=sync_fs,json=syncFs,proto3" json:"sync_fs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyRequest) GetDiff() *types.Descriptor {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *ApplyRequest) GetMounts() []*types.Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *ApplyRequest) GetPayloads() map[string]*anypb.Any {
	if x != nil {
		return x.Payloads
	}
	return nil
}

func (x *ApplyRequest) GetSyncFs() bool {
	if x != nil {
		return x.SyncFs
	}
	return false
}

type ApplyResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Applied is the descriptor for the object which was applied.
	// If the input was a compressed blob then the result will be
	// the descriptor for the uncompressed blob.
	Applied       *types.Descriptor `protobuf:"bytes,1,opt,name=applied,proto3" json:"applied,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyResponse) Reset() {
	*x = ApplyResponse{}
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyResponse) ProtoMessage() {}

func (x *ApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyResponse.ProtoReflect.Descriptor instead.
func (*ApplyResponse) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyResponse) GetApplied() *types.Descriptor {
	if x != nil {
		return x.Applied
	}
	return nil
}

type DiffRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Left are the mounts which represent the older copy
	// in which is the base of the computed changes.
	Left []*types.Mount `protobuf:"bytes,1,rep,name=left,proto3" json:"left,omitempty"`
	// Right are the mounts which represents the newer copy
	// in which changes from the left were made into.
	Right []*types.Mount `protobuf:"bytes,2,rep,name=right,proto3" json:"right,omitempty"`
	// MediaType is the media type descriptor for the created diff
	// object
	MediaType string `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	// Ref identifies the pre-commit content store object. This
	// reference can be used to get the status from the content store.
	Ref string `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	// Labels are the labels to apply to the generated content
	// on content store commit.
	Labels map[string]string `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// SourceDateEpoch specifies the timestamp used to provide control for reproducibility.
	// See also https://reproducible-builds.org/docs/source-date-epoch/ .
	//
	// Since containerd v2.0, the whiteout timestamps are set to zero (1970-01-01),
	// not to the source date epoch.
	SourceDateEpoch *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=source_date_epoch,json=sourceDateEpoch,proto3" json:"source_date_epoch,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DiffRequest) Reset() {
	*x = DiffRequest{}
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffRequest) ProtoMessage() {}

func (x *DiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffRequest.ProtoReflect.Descriptor instead.
func (*DiffRequest) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescGZIP(), []int{2}
}

func (x *DiffRequest) GetLeft() []*types.Mount {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *DiffRequest) GetRight() []*types.Mount {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *DiffRequest) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *DiffRequest) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *DiffRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DiffRequest) GetSourceDateEpoch() *timestamppb.Timestamp {
	if x != nil {
		return x.SourceDateEpoch
	}
	return nil
}

type DiffResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Diff is the descriptor of the diff which can be applied
	Diff          *types.Descriptor `protobuf:"bytes,3,opt,name=diff,proto3" json:"diff,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiffResponse) Reset() {
	*x = DiffResponse{}
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiffResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffResponse) ProtoMessage() {}

func (x *DiffResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffResponse.ProtoReflect.Descriptor instead.
func (*DiffResponse) Descriptor() ([]byte, []int) {
	return file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescGZIP(), []int{3}
}

func (x *DiffResponse) GetDiff() *types.Descriptor {
	if x != nil {
		return x.Diff
	}
	return nil
}

var File_github_com_containerd_containerd_api_services_diff_v1_diff_proto protoreflect.FileDescriptor

const file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDesc = "" +
	"\n" +
	"@github.com/containerd/containerd/api/services/diff/v1/diff.proto\x12\x1bcontainerd.services.diff.v1\x1a\x19google/protobuf/any.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a6github.com/containerd/containerd/api/types/mount.proto\x1a;github.com/containerd/containerd/api/types/descriptor.proto\"\xb2\x02\n" +
	"\fApplyRequest\x120\n" +
	"\x04diff\x18\x01 \x01(\v2\x1c.containerd.types.DescriptorR\x04diff\x12/\n" +
	"\x06mounts\x18\x02 \x03(\v2\x17.containerd.types.MountR\x06mounts\x12S\n" +
	"\bpayloads\x18\x03 \x03(\v27.containerd.services.diff.v1.ApplyRequest.PayloadsEntryR\bpayloads\x12\x17\n" +
	"\async_fs\x18\x04 \x01(\bR\x06syncFs\x1aQ\n" +
	"\rPayloadsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\"G\n" +
	"\rApplyResponse\x126\n" +
	"\aapplied\x18\x01 \x01(\v2\x1c.containerd.types.DescriptorR\aapplied\"\xeb\x02\n" +
	"\vDiffRequest\x12+\n" +
	"\x04left\x18\x01 \x03(\v2\x17.containerd.types.MountR\x04left\x12-\n" +
	"\x05right\x18\x02 \x03(\v2\x17.containerd.types.MountR\x05right\x12\x1d\n" +
	"\n" +
	"media_type\x18\x03 \x01(\tR\tmediaType\x12\x10\n" +
	"\x03ref\x18\x04 \x01(\tR\x03ref\x12L\n" +
	"\x06labels\x18\x05 \x03(\v24.containerd.services.diff.v1.DiffRequest.LabelsEntryR\x06labels\x12F\n" +
	"\x11source_date_epoch\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x0fsourceDateEpoch\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"@\n" +
	"\fDiffResponse\x120\n" +
	"\x04diff\x18\x03 \x01(\v2\x1c.containerd.types.DescriptorR\x04diff2\xc3\x01\n" +
	"\x04Diff\x12^\n" +
	"\x05Apply\x12).containerd.services.diff.v1.ApplyRequest\x1a*.containerd.services.diff.v1.ApplyResponse\x12[\n" +
	"\x04Diff\x12(.containerd.services.diff.v1.DiffRequest\x1a).containerd.services.diff.v1.DiffResponseB<Z:github.com/containerd/containerd/api/services/diff/v1;diffb\x06proto3"

var (
	file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescOnce sync.Once
	file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescData []byte
)

func file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescGZIP() []byte {
	file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescOnce.Do(func() {
		file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDesc), len(file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDesc)))
	})
	return file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDescData
}

var file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_goTypes = []any{
	(*ApplyRequest)(nil),          // 0: containerd.services.diff.v1.ApplyRequest
	(*ApplyResponse)(nil),         // 1: containerd.services.diff.v1.ApplyResponse
	(*DiffRequest)(nil),           // 2: containerd.services.diff.v1.DiffRequest
	(*DiffResponse)(nil),          // 3: containerd.services.diff.v1.DiffResponse
	nil,                           // 4: containerd.services.diff.v1.ApplyRequest.PayloadsEntry
	nil,                           // 5: containerd.services.diff.v1.DiffRequest.LabelsEntry
	(*types.Descriptor)(nil),      // 6: containerd.types.Descriptor
	(*types.Mount)(nil),           // 7: containerd.types.Mount
	(*timestamppb.Timestamp)(nil), // 8: google.protobuf.Timestamp
	(*anypb.Any)(nil),             // 9: google.protobuf.Any
}
var file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_depIdxs = []int32{
	6,  // 0: containerd.services.diff.v1.ApplyRequest.diff:type_name -> containerd.types.Descriptor
	7,  // 1: containerd.services.diff.v1.ApplyRequest.mounts:type_name -> containerd.types.Mount
	4,  // 2: containerd.services.diff.v1.ApplyRequest.payloads:type_name -> containerd.services.diff.v1.ApplyRequest.PayloadsEntry
	6,  // 3: containerd.services.diff.v1.ApplyResponse.applied:type_name -> containerd.types.Descriptor
	7,  // 4: containerd.services.diff.v1.DiffRequest.left:type_name -> containerd.types.Mount
	7,  // 5: containerd.services.diff.v1.DiffRequest.right:type_name -> containerd.types.Mount
	5,  // 6: containerd.services.diff.v1.DiffRequest.labels:type_name -> containerd.services.diff.v1.DiffRequest.LabelsEntry
	8,  // 7: containerd.services.diff.v1.DiffRequest.source_date_epoch:type_name -> google.protobuf.Timestamp
	6,  // 8: containerd.services.diff.v1.DiffResponse.diff:type_name -> containerd.types.Descriptor
	9,  // 9: containerd.services.diff.v1.ApplyRequest.PayloadsEntry.value:type_name -> google.protobuf.Any
	0,  // 10: containerd.services.diff.v1.Diff.Apply:input_type -> containerd.services.diff.v1.ApplyRequest
	2,  // 11: containerd.services.diff.v1.Diff.Diff:input_type -> containerd.services.diff.v1.DiffRequest
	1,  // 12: containerd.services.diff.v1.Diff.Apply:output_type -> containerd.services.diff.v1.ApplyResponse
	3,  // 13: containerd.services.diff.v1.Diff.Diff:output_type -> containerd.services.diff.v1.DiffResponse
	12, // [12:14] is the sub-list for method output_type
	10, // [10:12] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_init() }
func file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_init() {
	if File_github_com_containerd_containerd_api_services_diff_v1_diff_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDesc), len(file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_goTypes,
		DependencyIndexes: file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_depIdxs,
		MessageInfos:      file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_msgTypes,
	}.Build()
	File_github_com_containerd_containerd_api_services_diff_v1_diff_proto = out.File
	file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_goTypes = nil
	file_github_com_containerd_containerd_api_services_diff_v1_diff_proto_depIdxs = nil
}
