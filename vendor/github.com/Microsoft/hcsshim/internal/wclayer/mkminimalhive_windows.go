//go:build generate

/*
mkminimalhive_windows generates a minimal hive blob function
so that we do not carry a runtime dependency on the hive source.

The generated source contains a single function, minimalHiveContents,
which returns a []byte of the desired data.

Largely based on how mksyscall_windows works.
*/

package main

import (
	"encoding/base64"
	"errors"
	"flag"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"golang.org/x/tools/go/packages"
)

var (
	filename = flag.String("output", "", "output file name (standard output if omitted)")
)

//readMinimalHiveContents finds the `minimal` hive binary from the package as there's no way to create this file
// Originally from https://github.com/buildpacks/imgutil/blob/main/tools/bcdhive_generator/bcdhive_hivex.go
func readMinimalHiveContents() ([]byte, error) {
	pkgs, err := packages.Load(&packages.Config{}, "github.com/gabriel-samfira/go-hivex")
	if err != nil {
		return nil, err
	}
	if len(pkgs) != 1 || len(pkgs[0].GoFiles) != 1 {
		return nil, errors.New("hivex module root not found")
	}
	hivexRootPath := filepath.Dir(pkgs[0].GoFiles[0])
	minimalHivePath := filepath.Join(hivexRootPath, "testdata", "minimal")
	return os.ReadFile(minimalHivePath)
}

func usage() {
	fmt.Fprintf(os.Stderr, "usage: mkminimalhive_windows [flags] [path ...]\n")
	flag.PrintDefaults()
	os.Exit(1)
}

func main() {
	flag.Usage = usage
	flag.Parse()
	if len(flag.Args()) != 0 {
		fmt.Fprintf(os.Stderr, "unexpected filename arguments\n")
		usage()
	}

	hiveData, err := readMinimalHiveContents()
	if err != nil {
		log.Fatal(err)
	}

	hiveBase64 := base64.StdEncoding.EncodeToString(hiveData)

	source := []byte(`// Code generated by mkminimalhive_windows DO NOT EDIT.

package wclayer

import (
	"encoding/base64"
)

const hiveBase64 = "` + hiveBase64 + `"

func minimalHiveContents() ([]byte, error) {
	return base64.StdEncoding.DecodeString(hiveBase64)
}
`)

	if *filename == "" {
		_, err = os.Stdout.Write(source)
	} else {
		err = os.WriteFile(*filename, source, 0644)
	}
	if err != nil {
		log.Fatal(err)
	}
}
