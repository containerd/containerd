// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shim.proto

/*
	Package ttrpc is a generated protocol buffer package.

	It is generated from these files:
		shim.proto

	It has these top-level messages:
*/
package ttrpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"
import containerd_task_v2 "github.com/containerd/containerd/runtime/v2/task"

import context "context"
import ttrpc1 "github.com/containerd/ttrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TaskService interface {
	State(ctx context.Context, req *containerd_task_v2.StateRequest) (*containerd_task_v2.StateResponse, error)
	Create(ctx context.Context, req *containerd_task_v2.CreateTaskRequest) (*containerd_task_v2.CreateTaskResponse, error)
	Start(ctx context.Context, req *containerd_task_v2.StartRequest) (*containerd_task_v2.StartResponse, error)
	Delete(ctx context.Context, req *containerd_task_v2.DeleteRequest) (*containerd_task_v2.DeleteResponse, error)
	Pids(ctx context.Context, req *containerd_task_v2.PidsRequest) (*containerd_task_v2.PidsResponse, error)
	Pause(ctx context.Context, req *containerd_task_v2.PauseRequest) (*google_protobuf.Empty, error)
	Resume(ctx context.Context, req *containerd_task_v2.ResumeRequest) (*google_protobuf.Empty, error)
	Checkpoint(ctx context.Context, req *containerd_task_v2.CheckpointTaskRequest) (*google_protobuf.Empty, error)
	Kill(ctx context.Context, req *containerd_task_v2.KillRequest) (*google_protobuf.Empty, error)
	Exec(ctx context.Context, req *containerd_task_v2.ExecProcessRequest) (*google_protobuf.Empty, error)
	ResizePty(ctx context.Context, req *containerd_task_v2.ResizePtyRequest) (*google_protobuf.Empty, error)
	CloseIO(ctx context.Context, req *containerd_task_v2.CloseIORequest) (*google_protobuf.Empty, error)
	Update(ctx context.Context, req *containerd_task_v2.UpdateTaskRequest) (*google_protobuf.Empty, error)
	Wait(ctx context.Context, req *containerd_task_v2.WaitRequest) (*containerd_task_v2.WaitResponse, error)
	Stats(ctx context.Context, req *containerd_task_v2.StatsRequest) (*containerd_task_v2.StatsResponse, error)
	Connect(ctx context.Context, req *containerd_task_v2.ConnectRequest) (*containerd_task_v2.ConnectResponse, error)
	Shutdown(ctx context.Context, req *containerd_task_v2.ShutdownRequest) (*google_protobuf.Empty, error)
}

func RegisterTaskService(srv *ttrpc1.Server, svc TaskService) {
	srv.Register("containerd.task.v2.Task", map[string]ttrpc1.Method{
		"State": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.StateRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.State(ctx, &req)
		},
		"Create": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.CreateTaskRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Create(ctx, &req)
		},
		"Start": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.StartRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Start(ctx, &req)
		},
		"Delete": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.DeleteRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Delete(ctx, &req)
		},
		"Pids": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.PidsRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Pids(ctx, &req)
		},
		"Pause": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.PauseRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Pause(ctx, &req)
		},
		"Resume": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.ResumeRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Resume(ctx, &req)
		},
		"Checkpoint": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.CheckpointTaskRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Checkpoint(ctx, &req)
		},
		"Kill": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.KillRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Kill(ctx, &req)
		},
		"Exec": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.ExecProcessRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Exec(ctx, &req)
		},
		"ResizePty": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.ResizePtyRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.ResizePty(ctx, &req)
		},
		"CloseIO": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.CloseIORequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.CloseIO(ctx, &req)
		},
		"Update": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.UpdateTaskRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Update(ctx, &req)
		},
		"Wait": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.WaitRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Wait(ctx, &req)
		},
		"Stats": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.StatsRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Stats(ctx, &req)
		},
		"Connect": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.ConnectRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Connect(ctx, &req)
		},
		"Shutdown": func(ctx context.Context, unmarshal func(interface{}) error) (interface{}, error) {
			var req containerd_task_v2.ShutdownRequest
			if err := unmarshal(&req); err != nil {
				return nil, err
			}
			return svc.Shutdown(ctx, &req)
		},
	})
}

type taskClient struct {
	client *ttrpc1.Client
}

func NewTaskClient(client *ttrpc1.Client) TaskService {
	return &taskClient{
		client: client,
	}
}

func (c *taskClient) State(ctx context.Context, req *containerd_task_v2.StateRequest) (*containerd_task_v2.StateResponse, error) {
	var resp containerd_task_v2.StateResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "State", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Create(ctx context.Context, req *containerd_task_v2.CreateTaskRequest) (*containerd_task_v2.CreateTaskResponse, error) {
	var resp containerd_task_v2.CreateTaskResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Create", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Start(ctx context.Context, req *containerd_task_v2.StartRequest) (*containerd_task_v2.StartResponse, error) {
	var resp containerd_task_v2.StartResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Start", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Delete(ctx context.Context, req *containerd_task_v2.DeleteRequest) (*containerd_task_v2.DeleteResponse, error) {
	var resp containerd_task_v2.DeleteResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Delete", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Pids(ctx context.Context, req *containerd_task_v2.PidsRequest) (*containerd_task_v2.PidsResponse, error) {
	var resp containerd_task_v2.PidsResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Pids", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Pause(ctx context.Context, req *containerd_task_v2.PauseRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Pause", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Resume(ctx context.Context, req *containerd_task_v2.ResumeRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Resume", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Checkpoint(ctx context.Context, req *containerd_task_v2.CheckpointTaskRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Checkpoint", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Kill(ctx context.Context, req *containerd_task_v2.KillRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Kill", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Exec(ctx context.Context, req *containerd_task_v2.ExecProcessRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Exec", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) ResizePty(ctx context.Context, req *containerd_task_v2.ResizePtyRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "ResizePty", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) CloseIO(ctx context.Context, req *containerd_task_v2.CloseIORequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "CloseIO", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Update(ctx context.Context, req *containerd_task_v2.UpdateTaskRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Update", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Wait(ctx context.Context, req *containerd_task_v2.WaitRequest) (*containerd_task_v2.WaitResponse, error) {
	var resp containerd_task_v2.WaitResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Wait", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Stats(ctx context.Context, req *containerd_task_v2.StatsRequest) (*containerd_task_v2.StatsResponse, error) {
	var resp containerd_task_v2.StatsResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Stats", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Connect(ctx context.Context, req *containerd_task_v2.ConnectRequest) (*containerd_task_v2.ConnectResponse, error) {
	var resp containerd_task_v2.ConnectResponse
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Connect", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func (c *taskClient) Shutdown(ctx context.Context, req *containerd_task_v2.ShutdownRequest) (*google_protobuf.Empty, error) {
	var resp google_protobuf.Empty
	if err := c.client.Call(ctx, "containerd.task.v2.Task", "Shutdown", req, &resp); err != nil {
		return nil, err
	}
	return &resp, nil
}

func init() { proto.RegisterFile("shim.proto", fileDescriptorShim) }

var fileDescriptorShim = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0x6b, 0xc9, 0x75, 0x61, 0x8e, 0x2b, 0x84, 0x50, 0x90, 0x4c, 0xf9, 0x2b, 0x71, 0xb1,
	0xa5, 0xf0, 0x00, 0x08, 0xdc, 0x50, 0x45, 0x20, 0x25, 0x4a, 0x41, 0xe5, 0x86, 0x1c, 0x67, 0x70,
	0xac, 0xd8, 0x5e, 0xe3, 0x19, 0x17, 0xca, 0x89, 0x33, 0x4f, 0xd6, 0x23, 0x47, 0x8e, 0x34, 0x4f,
	0x82, 0xd6, 0x6b, 0xd3, 0x22, 0xbc, 0x59, 0x6e, 0xab, 0x7c, 0x3f, 0x7f, 0x3b, 0x99, 0x9d, 0x5d,
	0x00, 0x5a, 0x67, 0x45, 0x50, 0xd5, 0x92, 0xa5, 0x10, 0x89, 0x2c, 0x39, 0xce, 0x4a, 0xac, 0x57,
	0x01, 0xc7, 0xb4, 0x09, 0xce, 0xc6, 0xa3, 0xbb, 0xa9, 0x94, 0x69, 0x8e, 0x61, 0x9b, 0x58, 0x36,
	0x1f, 0x43, 0x2c, 0x2a, 0x3e, 0xd7, 0x1f, 0x8c, 0x6e, 0xa5, 0x32, 0x95, 0xed, 0x32, 0x54, 0xab,
	0xee, 0xd7, 0xa3, 0x34, 0xe3, 0x75, 0xb3, 0x0c, 0x12, 0x59, 0x84, 0x57, 0xc6, 0xeb, 0xcb, 0xba,
	0x29, 0x39, 0x2b, 0x30, 0x3c, 0x1b, 0x87, 0x6a, 0x9f, 0x50, 0xd5, 0xf0, 0xa1, 0x40, 0xa2, 0x38,
	0x45, 0xd2, 0x96, 0xf1, 0x77, 0x00, 0xf7, 0x6d, 0x4c, 0x1b, 0xf1, 0x06, 0xf6, 0x4f, 0x38, 0x66,
	0x14, 0x87, 0xc1, 0xbf, 0xf5, 0x05, 0x2d, 0x5a, 0xe0, 0xa7, 0x06, 0x89, 0x47, 0xf7, 0x77, 0x24,
	0xa8, 0x92, 0x25, 0xa1, 0x38, 0x05, 0x2f, 0xaa, 0x51, 0xe9, 0x1e, 0x0f, 0x85, 0x35, 0x53, 0xfb,
	0xf6, 0xce, 0x27, 0xb6, 0x58, 0x27, 0xd6, 0x65, 0xd6, 0x6c, 0x2c, 0xb3, 0x66, 0x5b, 0x99, 0x2a,
	0xd1, 0xd9, 0x66, 0xe0, 0x1d, 0x61, 0x8e, 0x8c, 0x62, 0x30, 0xac, 0x59, 0xef, 0x7b, 0xb0, 0x2b,
	0xd2, 0x09, 0xa7, 0xe0, 0xce, 0xb3, 0x15, 0x89, 0x7b, 0x43, 0x59, 0x45, 0x7a, 0xd9, 0xa1, 0x39,
	0xd0, 0xa9, 0x5e, 0xc0, 0xfe, 0x3c, 0x6e, 0xc8, 0x70, 0x20, 0x2d, 0xea, 0x65, 0xb7, 0x03, 0x3d,
	0x3e, 0x41, 0x3f, 0x3e, 0xc1, 0x44, 0x8d, 0x8f, 0x88, 0xc0, 0x5b, 0x20, 0x35, 0x85, 0xe1, 0xef,
	0x69, 0x66, 0x93, 0xcc, 0x00, 0xa2, 0x35, 0x26, 0x9b, 0x4a, 0x66, 0x25, 0x8b, 0xa7, 0x83, 0xe7,
	0xf4, 0x87, 0x5f, 0x3f, 0x52, 0x93, 0xf0, 0x39, 0xb8, 0xaf, 0xb3, 0x3c, 0x1f, 0xee, 0x91, 0x22,
	0x36, 0xc1, 0x2b, 0x70, 0x27, 0x5f, 0x30, 0x11, 0x83, 0x33, 0xa3, 0xc8, 0xbc, 0x96, 0x09, 0x12,
	0xd9, 0x3c, 0x53, 0xb8, 0xb9, 0x40, 0xca, 0xbe, 0xe2, 0x9c, 0xcf, 0xc5, 0x23, 0x43, 0x87, 0x34,
	0xb6, 0xa9, 0x26, 0x70, 0x10, 0xe5, 0x92, 0x70, 0x3a, 0x13, 0x83, 0x63, 0xd2, 0x41, 0x9b, 0xe6,
	0x18, 0xbc, 0x77, 0xd5, 0xca, 0x78, 0x6d, 0x34, 0xfb, 0x9f, 0x1e, 0x4f, 0xc1, 0x3d, 0x8d, 0x33,
	0x1e, 0xee, 0xb1, 0x22, 0x3b, 0xe7, 0x50, 0x07, 0xfe, 0xba, 0x71, 0x4c, 0xe6, 0x87, 0x81, 0xac,
	0x0f, 0xc3, 0xd5, 0x54, 0x2f, 0xe0, 0x20, 0x92, 0x65, 0x89, 0x09, 0x1b, 0x1a, 0xa5, 0x61, 0x6f,
	0x7c, 0xb8, 0x33, 0xd3, 0x39, 0x8f, 0xe1, 0xc6, 0xc9, 0xba, 0xe1, 0x95, 0xfc, 0x5c, 0x8a, 0xc1,
	0x0f, 0x7a, 0x6a, 0xe9, 0xda, 0xcb, 0x3b, 0x17, 0x97, 0xfe, 0xde, 0xcf, 0x4b, 0x7f, 0xef, 0xdb,
	0xd6, 0x77, 0x2e, 0xb6, 0xbe, 0xf3, 0x63, 0xeb, 0x3b, 0xbf, 0xb6, 0xbe, 0xf3, 0xde, 0x59, 0x7a,
	0x6d, 0xf6, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x09, 0x5c, 0xbe, 0xca, 0x05, 0x00,
	0x00,
}
