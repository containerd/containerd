// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shim.proto

/*
	Package grpc is a generated protocol buffer package.

	It is generated from these files:
		shim.proto

	It has these top-level messages:
*/
package grpc

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"

// skipping weak import gogoproto "github.com/gogo/protobuf/gogoproto"
import containerd_task_v2 "github.com/containerd/containerd/runtime/v2/task"

import context "golang.org/x/net/context"
import grpc1 "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for Task service

type TaskClient interface {
	State(ctx context.Context, in *containerd_task_v2.StateRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StateResponse, error)
	Create(ctx context.Context, in *containerd_task_v2.CreateTaskRequest, opts ...grpc1.CallOption) (*containerd_task_v2.CreateTaskResponse, error)
	Start(ctx context.Context, in *containerd_task_v2.StartRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StartResponse, error)
	Delete(ctx context.Context, in *containerd_task_v2.DeleteRequest, opts ...grpc1.CallOption) (*containerd_task_v2.DeleteResponse, error)
	Pids(ctx context.Context, in *containerd_task_v2.PidsRequest, opts ...grpc1.CallOption) (*containerd_task_v2.PidsResponse, error)
	Pause(ctx context.Context, in *containerd_task_v2.PauseRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Resume(ctx context.Context, in *containerd_task_v2.ResumeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Checkpoint(ctx context.Context, in *containerd_task_v2.CheckpointTaskRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Kill(ctx context.Context, in *containerd_task_v2.KillRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Exec(ctx context.Context, in *containerd_task_v2.ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	ResizePty(ctx context.Context, in *containerd_task_v2.ResizePtyRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	CloseIO(ctx context.Context, in *containerd_task_v2.CloseIORequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Update(ctx context.Context, in *containerd_task_v2.UpdateTaskRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
	Wait(ctx context.Context, in *containerd_task_v2.WaitRequest, opts ...grpc1.CallOption) (*containerd_task_v2.WaitResponse, error)
	Stats(ctx context.Context, in *containerd_task_v2.StatsRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StatsResponse, error)
	Connect(ctx context.Context, in *containerd_task_v2.ConnectRequest, opts ...grpc1.CallOption) (*containerd_task_v2.ConnectResponse, error)
	Shutdown(ctx context.Context, in *containerd_task_v2.ShutdownRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error)
}

type taskClient struct {
	cc *grpc1.ClientConn
}

func NewTaskClient(cc *grpc1.ClientConn) TaskClient {
	return &taskClient{cc}
}

func (c *taskClient) State(ctx context.Context, in *containerd_task_v2.StateRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StateResponse, error) {
	out := new(containerd_task_v2.StateResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/State", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Create(ctx context.Context, in *containerd_task_v2.CreateTaskRequest, opts ...grpc1.CallOption) (*containerd_task_v2.CreateTaskResponse, error) {
	out := new(containerd_task_v2.CreateTaskResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Start(ctx context.Context, in *containerd_task_v2.StartRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StartResponse, error) {
	out := new(containerd_task_v2.StartResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Delete(ctx context.Context, in *containerd_task_v2.DeleteRequest, opts ...grpc1.CallOption) (*containerd_task_v2.DeleteResponse, error) {
	out := new(containerd_task_v2.DeleteResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Pids(ctx context.Context, in *containerd_task_v2.PidsRequest, opts ...grpc1.CallOption) (*containerd_task_v2.PidsResponse, error) {
	out := new(containerd_task_v2.PidsResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Pids", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Pause(ctx context.Context, in *containerd_task_v2.PauseRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Pause", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Resume(ctx context.Context, in *containerd_task_v2.ResumeRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Resume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Checkpoint(ctx context.Context, in *containerd_task_v2.CheckpointTaskRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Checkpoint", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Kill(ctx context.Context, in *containerd_task_v2.KillRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Kill", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Exec(ctx context.Context, in *containerd_task_v2.ExecProcessRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) ResizePty(ctx context.Context, in *containerd_task_v2.ResizePtyRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/ResizePty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) CloseIO(ctx context.Context, in *containerd_task_v2.CloseIORequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/CloseIO", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Update(ctx context.Context, in *containerd_task_v2.UpdateTaskRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Wait(ctx context.Context, in *containerd_task_v2.WaitRequest, opts ...grpc1.CallOption) (*containerd_task_v2.WaitResponse, error) {
	out := new(containerd_task_v2.WaitResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Wait", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Stats(ctx context.Context, in *containerd_task_v2.StatsRequest, opts ...grpc1.CallOption) (*containerd_task_v2.StatsResponse, error) {
	out := new(containerd_task_v2.StatsResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Connect(ctx context.Context, in *containerd_task_v2.ConnectRequest, opts ...grpc1.CallOption) (*containerd_task_v2.ConnectResponse, error) {
	out := new(containerd_task_v2.ConnectResponse)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskClient) Shutdown(ctx context.Context, in *containerd_task_v2.ShutdownRequest, opts ...grpc1.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc1.Invoke(ctx, "/containerd.task.v2.Task/Shutdown", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Task service

type TaskServer interface {
	State(context.Context, *containerd_task_v2.StateRequest) (*containerd_task_v2.StateResponse, error)
	Create(context.Context, *containerd_task_v2.CreateTaskRequest) (*containerd_task_v2.CreateTaskResponse, error)
	Start(context.Context, *containerd_task_v2.StartRequest) (*containerd_task_v2.StartResponse, error)
	Delete(context.Context, *containerd_task_v2.DeleteRequest) (*containerd_task_v2.DeleteResponse, error)
	Pids(context.Context, *containerd_task_v2.PidsRequest) (*containerd_task_v2.PidsResponse, error)
	Pause(context.Context, *containerd_task_v2.PauseRequest) (*google_protobuf.Empty, error)
	Resume(context.Context, *containerd_task_v2.ResumeRequest) (*google_protobuf.Empty, error)
	Checkpoint(context.Context, *containerd_task_v2.CheckpointTaskRequest) (*google_protobuf.Empty, error)
	Kill(context.Context, *containerd_task_v2.KillRequest) (*google_protobuf.Empty, error)
	Exec(context.Context, *containerd_task_v2.ExecProcessRequest) (*google_protobuf.Empty, error)
	ResizePty(context.Context, *containerd_task_v2.ResizePtyRequest) (*google_protobuf.Empty, error)
	CloseIO(context.Context, *containerd_task_v2.CloseIORequest) (*google_protobuf.Empty, error)
	Update(context.Context, *containerd_task_v2.UpdateTaskRequest) (*google_protobuf.Empty, error)
	Wait(context.Context, *containerd_task_v2.WaitRequest) (*containerd_task_v2.WaitResponse, error)
	Stats(context.Context, *containerd_task_v2.StatsRequest) (*containerd_task_v2.StatsResponse, error)
	Connect(context.Context, *containerd_task_v2.ConnectRequest) (*containerd_task_v2.ConnectResponse, error)
	Shutdown(context.Context, *containerd_task_v2.ShutdownRequest) (*google_protobuf.Empty, error)
}

func RegisterTaskServer(s *grpc1.Server, srv TaskServer) {
	s.RegisterService(&_Task_serviceDesc, srv)
}

func _Task_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).State(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).State(ctx, req.(*containerd_task_v2.StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Create(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Create(ctx, req.(*containerd_task_v2.CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Start(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Start(ctx, req.(*containerd_task_v2.StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Delete(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Delete(ctx, req.(*containerd_task_v2.DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Pids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.PidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Pids(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Pids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Pids(ctx, req.(*containerd_task_v2.PidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Pause_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.PauseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Pause(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Pause",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Pause(ctx, req.(*containerd_task_v2.PauseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.ResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Resume(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Resume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Resume(ctx, req.(*containerd_task_v2.ResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.CheckpointTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Checkpoint(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Checkpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Checkpoint(ctx, req.(*containerd_task_v2.CheckpointTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Kill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.KillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Kill(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Kill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Kill(ctx, req.(*containerd_task_v2.KillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.ExecProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Exec(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Exec(ctx, req.(*containerd_task_v2.ExecProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_ResizePty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.ResizePtyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).ResizePty(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/ResizePty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).ResizePty(ctx, req.(*containerd_task_v2.ResizePtyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_CloseIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.CloseIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).CloseIO(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/CloseIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).CloseIO(ctx, req.(*containerd_task_v2.CloseIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Update(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Update(ctx, req.(*containerd_task_v2.UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Wait(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Wait(ctx, req.(*containerd_task_v2.WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Stats(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Stats(ctx, req.(*containerd_task_v2.StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Connect(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Connect(ctx, req.(*containerd_task_v2.ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Task_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(containerd_task_v2.ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServer).Shutdown(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.task.v2.Task/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServer).Shutdown(ctx, req.(*containerd_task_v2.ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Task_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "containerd.task.v2.Task",
	HandlerType: (*TaskServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "State",
			Handler:    _Task_State_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Task_Create_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Task_Start_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Task_Delete_Handler,
		},
		{
			MethodName: "Pids",
			Handler:    _Task_Pids_Handler,
		},
		{
			MethodName: "Pause",
			Handler:    _Task_Pause_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _Task_Resume_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Task_Checkpoint_Handler,
		},
		{
			MethodName: "Kill",
			Handler:    _Task_Kill_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Task_Exec_Handler,
		},
		{
			MethodName: "ResizePty",
			Handler:    _Task_ResizePty_Handler,
		},
		{
			MethodName: "CloseIO",
			Handler:    _Task_CloseIO_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Task_Update_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _Task_Wait_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Task_Stats_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _Task_Connect_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _Task_Shutdown_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "shim.proto",
}

func init() { proto.RegisterFile("shim.proto", fileDescriptorShim) }

var fileDescriptorShim = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0x87, 0x6b, 0xc9, 0x75, 0x61, 0x8e, 0x2b, 0x84, 0x50, 0x90, 0x4c, 0xf9, 0x2b, 0x71, 0xb1,
	0xa5, 0xf0, 0x00, 0x08, 0xdc, 0x50, 0x45, 0x20, 0x25, 0x4a, 0x41, 0xe5, 0x86, 0x1c, 0x67, 0x70,
	0xac, 0xd8, 0x5e, 0xe3, 0x19, 0x17, 0xca, 0x89, 0x33, 0x4f, 0xd6, 0x23, 0x47, 0x8e, 0x34, 0x4f,
	0x82, 0xd6, 0x6b, 0xd3, 0x22, 0xbc, 0x59, 0x6e, 0xab, 0x7c, 0x3f, 0x7f, 0x3b, 0x99, 0x9d, 0x5d,
	0x00, 0x5a, 0x67, 0x45, 0x50, 0xd5, 0x92, 0xa5, 0x10, 0x89, 0x2c, 0x39, 0xce, 0x4a, 0xac, 0x57,
	0x01, 0xc7, 0xb4, 0x09, 0xce, 0xc6, 0xa3, 0xbb, 0xa9, 0x94, 0x69, 0x8e, 0x61, 0x9b, 0x58, 0x36,
	0x1f, 0x43, 0x2c, 0x2a, 0x3e, 0xd7, 0x1f, 0x8c, 0x6e, 0xa5, 0x32, 0x95, 0xed, 0x32, 0x54, 0xab,
	0xee, 0xd7, 0xa3, 0x34, 0xe3, 0x75, 0xb3, 0x0c, 0x12, 0x59, 0x84, 0x57, 0xc6, 0xeb, 0xcb, 0xba,
	0x29, 0x39, 0x2b, 0x30, 0x3c, 0x1b, 0x87, 0x6a, 0x9f, 0x50, 0xd5, 0xf0, 0xa1, 0x40, 0xa2, 0x38,
	0x45, 0xd2, 0x96, 0xf1, 0x77, 0x00, 0xf7, 0x6d, 0x4c, 0x1b, 0xf1, 0x06, 0xf6, 0x4f, 0x38, 0x66,
	0x14, 0x87, 0xc1, 0xbf, 0xf5, 0x05, 0x2d, 0x5a, 0xe0, 0xa7, 0x06, 0x89, 0x47, 0xf7, 0x77, 0x24,
	0xa8, 0x92, 0x25, 0xa1, 0x38, 0x05, 0x2f, 0xaa, 0x51, 0xe9, 0x1e, 0x0f, 0x85, 0x35, 0x53, 0xfb,
	0xf6, 0xce, 0x27, 0xb6, 0x58, 0x27, 0xd6, 0x65, 0xd6, 0x6c, 0x2c, 0xb3, 0x66, 0x5b, 0x99, 0x2a,
	0xd1, 0xd9, 0x66, 0xe0, 0x1d, 0x61, 0x8e, 0x8c, 0x62, 0x30, 0xac, 0x59, 0xef, 0x7b, 0xb0, 0x2b,
	0xd2, 0x09, 0xa7, 0xe0, 0xce, 0xb3, 0x15, 0x89, 0x7b, 0x43, 0x59, 0x45, 0x7a, 0xd9, 0xa1, 0x39,
	0xd0, 0xa9, 0x5e, 0xc0, 0xfe, 0x3c, 0x6e, 0xc8, 0x70, 0x20, 0x2d, 0xea, 0x65, 0xb7, 0x03, 0x3d,
	0x3e, 0x41, 0x3f, 0x3e, 0xc1, 0x44, 0x8d, 0x8f, 0x88, 0xc0, 0x5b, 0x20, 0x35, 0x85, 0xe1, 0xef,
	0x69, 0x66, 0x93, 0xcc, 0x00, 0xa2, 0x35, 0x26, 0x9b, 0x4a, 0x66, 0x25, 0x8b, 0xa7, 0x83, 0xe7,
	0xf4, 0x87, 0x5f, 0x3f, 0x52, 0x93, 0xf0, 0x39, 0xb8, 0xaf, 0xb3, 0x3c, 0x1f, 0xee, 0x91, 0x22,
	0x36, 0xc1, 0x2b, 0x70, 0x27, 0x5f, 0x30, 0x11, 0x83, 0x33, 0xa3, 0xc8, 0xbc, 0x96, 0x09, 0x12,
	0xd9, 0x3c, 0x53, 0xb8, 0xb9, 0x40, 0xca, 0xbe, 0xe2, 0x9c, 0xcf, 0xc5, 0x23, 0x43, 0x87, 0x34,
	0xb6, 0xa9, 0x26, 0x70, 0x10, 0xe5, 0x92, 0x70, 0x3a, 0x13, 0x83, 0x63, 0xd2, 0x41, 0x9b, 0xe6,
	0x18, 0xbc, 0x77, 0xd5, 0xca, 0x78, 0x6d, 0x34, 0xfb, 0x9f, 0x1e, 0x4f, 0xc1, 0x3d, 0x8d, 0x33,
	0x1e, 0xee, 0xb1, 0x22, 0x3b, 0xe7, 0x50, 0x07, 0xfe, 0xba, 0x71, 0x4c, 0xe6, 0x87, 0x81, 0xac,
	0x0f, 0xc3, 0xd5, 0x54, 0x2f, 0xe0, 0x20, 0x92, 0x65, 0x89, 0x09, 0x1b, 0x1a, 0xa5, 0x61, 0x6f,
	0x7c, 0xb8, 0x33, 0xd3, 0x39, 0x8f, 0xe1, 0xc6, 0xc9, 0xba, 0xe1, 0x95, 0xfc, 0x5c, 0x8a, 0xc1,
	0x0f, 0x7a, 0x6a, 0xe9, 0xda, 0xcb, 0x3b, 0x17, 0x97, 0xfe, 0xde, 0xcf, 0x4b, 0x7f, 0xef, 0xdb,
	0xd6, 0x77, 0x2e, 0xb6, 0xbe, 0xf3, 0x63, 0xeb, 0x3b, 0xbf, 0xb6, 0xbe, 0xf3, 0xde, 0x59, 0x7a,
	0x6d, 0xf6, 0xd9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x09, 0x5c, 0xbe, 0xca, 0x05, 0x00,
	0x00,
}
