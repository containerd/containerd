on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Containerd Release

jobs:
  check:
    name: Check Signed Tag
    runs-on: ubuntu-18.04
    timeout-minutes: 5
    outputs:
      stringver: ${{ steps.contentrel.outputs.stringver }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd

      - name: Check signature
        run: |
          releasever=${{ github.ref }}
          releasever="${releasever#refs/tags/}"
          TAGCHECK=$(git tag -v ${releasever} 2>&1 >/dev/null) ||
          echo "${TAGCHECK}" | grep -q "error" && {
              echo "::error::tag ${releasever} is not a signed tag. Failing release process."
              exit 1
          } || {
              echo "Tag ${releasever} is signed."
              exit 0
          }
        working-directory: src/github.com/containerd/containerd

      - name: Release content
        id: contentrel
        run: |
          RELEASEVER=${{ github.ref }}
          echo "::set-output name=stringver::${RELEASEVER#refs/tags/v}"
          git tag -l ${RELEASEVER#refs/tags/} -n20000 | tail -n +3 | cut -c 5- >release-notes.md
        working-directory: src/github.com/containerd/containerd

      - name: Save release notes
        uses: actions/upload-artifact@v2
        with:
          name: containerd-release-notes
          path: src/github.com/containerd/containerd/release-notes.md

  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: [check]
    timeout-minutes: 10

    strategy:
      matrix:
        include:
        - os: ubuntu-18.04
          arch: amd64
        - os: ubuntu-18.04
          arch: arm64
        - os: windows-2019
          arch: amd64

    steps:
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.16.3'

      - name: Checkout containerd
        uses: actions/checkout@v2
        with:
          repository: containerd/containerd
          ref: ${{ github.ref }}
          path: src/github.com/containerd/containerd

      - name: Install dependencies
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          if [[ "${GOARCH}" != "amd64" ]]; then
            sudo add-apt-repository "deb [arch=arm64,s390x,ppc64el] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc) main" || true
            sudo add-apt-repository "deb [arch=arm64,s390x,ppc64el] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -sc)-updates main" || true

            sudo dpkg --add-architecture arm64
            sudo dpkg --add-architecture s390x
            sudo dpkg --add-architecture ppc64el

            sudo apt-get update || true

            sudo apt-get install -y \
              crossbuild-essential-arm64 \
              crossbuild-essential-s390x \
              crossbuild-essential-ppc64el \
              libseccomp-dev:amd64 \
              libseccomp-dev:arm64 \
              libseccomp-dev:s390x \
              libseccomp-dev:ppc64el
              # libbtrfs-dev is not available for Ubuntu 18.04
              # libbtrfs-dev:amd64 \
              # libbtrfs-dev:arm64 \
              # libbtrfs-dev:s390x \
              # libbtrfs-dev:ppc64el
          fi

      - name: Install seccomp
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: |
          sudo -E PATH=$PATH script/setup/install-seccomp
        working-directory: src/github.com/containerd/containerd

      - name: Set env
        shell: bash
        run: |
          releasever=${{ github.ref }}
          releasever="${releasever#refs/tags/}"
          os=linux
          [[ "${{ matrix.os }}" =~ "windows" ]] && {
            os=windows
          }
          echo "RELEASE_VER=${releasever}" >> $GITHUB_ENV
          echo "GOPATH=${{ github.workspace }}" >> $GITHUB_ENV
          echo "GOOS=${os}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.arch }}" >> $GITHUB_ENV
          [[ "${{ matrix.arch }}" == "arm64" ]] && {
            echo "CGO_ENABLED=1" >> $GITHUB_ENV
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          }
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

      - name: HCS Shim commit
        id: hcsshim_commit
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: echo "::set-output name=sha::$(grep 'Microsoft/hcsshim ' go.mod | awk '{print $2}')"
        working-directory: src/github.com/containerd/containerd

      - name: Checkout hcsshim source
        if: startsWith(matrix.os, 'windows')
        uses: actions/checkout@v2
        with:
          repository: Microsoft/hcsshim
          ref: ${{ steps.hcsshim_commit.outputs.sha }}
          path: src/github.com/Microsoft/hcsshim

      - name: Make
        shell: bash
        run: |
          make build
          make binaries
          rm bin/containerd-stress*
          [[ "${GOOS}" == "windows" ]] && {
              (
                bindir="$(pwd)/bin"
                cd ../../Microsoft/hcsshim
                GO111MODULE=on go build -mod=vendor -o "${bindir}/containerd-shim-runhcs-v1.exe" ./cmd/containerd-shim-runhcs-v1
              )
          }
          TARFILE="containerd-${RELEASE_VER#v}-${GOOS}-${GOARCH}.tar.gz"
          tar czf ${TARFILE} bin/
          sha256sum ${TARFILE} >${TARFILE}.sha256sum
        working-directory: src/github.com/containerd/containerd

      - name: Save build binaries
        uses: actions/upload-artifact@v2
        with:
          name: containerd-binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: src/github.com/containerd/containerd/*.tar.gz*

      - name: Make cri-containerd tar
        shell: bash
        env:
          RUNC_FLAVOR: runc
        run: |
          make cri-cni-release
        working-directory: src/github.com/containerd/containerd

      - name: Save cri-containerd binaries
        uses: actions/upload-artifact@v2
        with:
          name: cri-containerd-binaries-${{ matrix.os }}-${{ matrix.arch }}
          path: src/github.com/containerd/containerd/releases/cri-containerd-cni-*.tar.gz*

  release:
    name: Create containerd Release
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    needs: [build, check]

    steps:
      - name: Download builds and release notes
        uses: actions/download-artifact@v2
        with:
          path: builds
      - name: Catalog build assets for upload
        id: catalog
        run: |
          _filenum=1
          for i in "ubuntu-18.04-amd64" "ubuntu-18.04-arm64" "windows-2019-amd64"; do
            for f in `ls builds/containerd-binaries-${i}`; do
              echo "::set-output name=file${_filenum}::${f}"
              let "_filenum+=1"
            done
            for f in `ls builds/cri-containerd-binaries-${i}`; do
              echo "::set-output name=file${_filenum}::${f}"
              let "_filenum+=1"
            done
          done
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: containerd ${{ needs.check.outputs.stringver }}
          body_path: ./builds/containerd-release-notes/release-notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
      - name: Upload Linux AMD64 containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-ubuntu-18.04-amd64/${{ steps.catalog.outputs.file1 }}
          asset_name: ${{ steps.catalog.outputs.file1 }}
          asset_content_type: application/gzip
      - name: Upload Linux AMD64 sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-ubuntu-18.04-amd64/${{ steps.catalog.outputs.file2 }}
          asset_name: ${{ steps.catalog.outputs.file2 }}
          asset_content_type: text/plain
      - name: Upload Linux AMD64 cri containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-ubuntu-18.04-amd64/${{ steps.catalog.outputs.file3 }}
          asset_name: ${{ steps.catalog.outputs.file3 }}
          asset_content_type: application/gzip
      - name: Upload Linux AMD64 cri sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-ubuntu-18.04-amd64/${{ steps.catalog.outputs.file4 }}
          asset_name: ${{ steps.catalog.outputs.file4 }}
          asset_content_type: text/plain
      - name: Upload Linux ARM64 containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-ubuntu-18.04-arm64/${{ steps.catalog.outputs.file5 }}
          asset_name: ${{ steps.catalog.outputs.file5 }}
          asset_content_type: application/gzip
      - name: Upload Linux ARM64 sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-ubuntu-18.04-arm64/${{ steps.catalog.outputs.file6 }}
          asset_name: ${{ steps.catalog.outputs.file6 }}
          asset_content_type: text/plain
      - name: Upload Linux ARM64 cri containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-ubuntu-18.04-arm64/${{ steps.catalog.outputs.file7 }}
          asset_name: ${{ steps.catalog.outputs.file7 }}
          asset_content_type: application/gzip
      - name: Upload Linux ARM64 cri sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-ubuntu-18.04-arm64/${{ steps.catalog.outputs.file8 }}
          asset_name: ${{ steps.catalog.outputs.file8 }}
          asset_content_type: text/plain
      - name: Upload Windows AMD64 containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-windows-2019-amd64/${{ steps.catalog.outputs.file9 }}
          asset_name: ${{ steps.catalog.outputs.file9 }}
          asset_content_type: application/gzip
      - name: Upload Windows AMD64 sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/containerd-binaries-windows-2019-amd64/${{ steps.catalog.outputs.file10 }}
          asset_name: ${{ steps.catalog.outputs.file10 }}
          asset_content_type: text/plain
      - name: Upload Windows AMD64 cri containerd tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-windows-2019-amd64/${{ steps.catalog.outputs.file11 }}
          asset_name: ${{ steps.catalog.outputs.file11 }}
          asset_content_type: application/gzip
      - name: Upload Windows AMD64 cri sha256 sum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/cri-containerd-binaries-windows-2019-amd64/${{ steps.catalog.outputs.file12 }}
          asset_name: ${{ steps.catalog.outputs.file12 }}
          asset_content_type: text/plain
